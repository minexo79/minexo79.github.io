<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>111年8月更新</title>
    <link href="/2022/09/03/month-update-0903/"/>
    <url>/2022/09/03/month-update-0903/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距離上次更新已經過了一個月又多一點了，這段期間除了在處理學校的專題還有研究之外，對於之前開的坑也在這段時間，前進了「一點」。</p><p>😿 <strong>對，真的是一點…</strong></p><h2 id="黑貓框架"><a href="#黑貓框架" class="headerlink" title="黑貓框架"></a>黑貓框架</h2><p><a href="https://github.com/minexo79/CatFramework_For_MSP430FR59xx"><img src="https://gh-card.dev/repos/minexo79/CatFramework_For_MSP430FR59xx.svg" alt="minexo79/CatFramework_For_MSP430FR59xx - GitHub"></a></p><p>這次的更新，包含了下面幾個改進：</p><h3 id="程式架構"><a href="#程式架構" class="headerlink" title="程式架構"></a>程式架構</h3><p>架構方面，採用「模組化」的方式，在最上層的Header引入其他功能的Header檔案，在往後也方便維護。<br><img src="/../img/post/1110903_2012_a.png" alt="頂層架構"></p><p>另外，我通常寫MSP430系列的MCU都是會「直接操作暫存器」，所以常常都會使用到C語言的邏輯運算符號 (And, Or, Xor, Not…等等)。<br>為了簡化並在往後能好理解每個程式碼的運作過程，我將操作暫存器的程式碼使用define形式定義，後續就可以用自己定義的define來撰寫程式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// SFR Data Type</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Reg8           volatile unsigned char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Reg16          volatile unsigned</span><br><br><span class="hljs-comment">// Bit Operation</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> AssignBit(x, y)    x = y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SetBit(x, y)       x |= y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ResetBit(x, y)     x &amp;= ~y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ToggleBit(x, y)    x ^= y</span><br></code></pre></td></tr></table></figure><h3 id="模組撰寫"><a href="#模組撰寫" class="headerlink" title="模組撰寫"></a>模組撰寫</h3><p>對於每個模組，我參考了Arduino Core和其他幾個HAL函式庫的寫法，在Header檔案先定義好需要用到的暫存器陣列，以及會給使用者做的函式。<br><a href="https://github.com/arduino/ArduinoCore-avr"><img src="https://gh-card.dev/repos/arduino/ArduinoCore-avr.svg" alt="arduino/ArduinoCore-avr - GitHub"></a><br>這裡我用到了extern保留字，它的作用是讓編譯器就自動去尋找其他程式嗎是否有該函式&#x2F;變數，並且連結起來。<br>讓我能在後續維護中，只需更改其他檔案中，有一樣名稱的函式&#x2F;暫存器陣列，而不必整個檔案都需要動到。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Register</span><br><span class="hljs-keyword">extern</span> _Reg8 *  uartSelPort0        [];<br><span class="hljs-keyword">extern</span> _Reg8 *  uartSelPort1        [];<br><span class="hljs-keyword">extern</span> _Reg16 * uartControlReg      [];<br><span class="hljs-comment">// ...</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * ======================================</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// Function</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Uart_ParamInit</span>  <span class="hljs-params">(uartParam *)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Uart_Init</span>       <span class="hljs-params">(uartParam *)</span>;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Uart_Write</span>      <span class="hljs-params">(uartParam *, <span class="hljs-type">char</span>)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Uart_WriteStr</span>   <span class="hljs-params">(uartParam *, <span class="hljs-type">char</span> *, <span class="hljs-type">char</span>)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">Uart_WriteStrln</span> <span class="hljs-params">(uartParam *, <span class="hljs-type">char</span> *, <span class="hljs-type">char</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>目前僅實現了下面的功能：</p><ul><li><input checked="" disabled="" type="checkbox"> 初始化設定</li><li><input checked="" disabled="" type="checkbox"> 字元&#x2F;字串非中斷方式傳輸</li></ul><p>其中傳輸的部分，我先寫好UART傳輸一個字元的函式<code>Uart_Write</code>，在之後擴充的時候，就可以事先呼叫寫好的傳輸函式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 傳送一個字元</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Uart_Write</span> <span class="hljs-params">(uartParam * ptr, <span class="hljs-type">char</span> word)</span><br>&#123;<br>    <span class="hljs-comment">// wait previous buffer was sent.</span><br>    <span class="hljs-keyword">while</span>((*uartInterFlagReg[ptr-&gt;unit] &amp; UCTXIFG) != UCTXIFG);<br>    <span class="hljs-comment">// send buffer</span><br>    *uartWriteReg[ptr-&gt;unit] = word;<br>&#125;<br><span class="hljs-comment">// 傳送一組字串</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Uart_WriteStr</span> <span class="hljs-params">(uartParam * ptr, <span class="hljs-type">char</span> * str, <span class="hljs-type">char</span> length)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(ptr-&gt;interruptMode == NONIE)<br>    &#123;<br>        <span class="hljs-type">char</span> _len = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// String was sent?</span><br>        <span class="hljs-keyword">while</span>(_len &lt; length)<br>        &#123;<br>            Uart_Write(ptr, str[_len++]);   <span class="hljs-comment">// 在這裡就可以直接呼叫Uart_Write函式，取代掉上面兩行。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>結果如下：<br><img src="/../img/post/1110903_2012_b.png" alt="Serial Output"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他有實現的程式碼就放在這邊介紹：</p><h4 id="看門狗"><a href="#看門狗" class="headerlink" title="看門狗"></a>看門狗</h4><ul><li><code>WatchDog_Shutdown()</code>：關閉看門狗計時，防止重新開機。</li></ul><h4 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h4><ul><li><code>GPIO_Init()</code>：初始化所有GPIO腳位的狀態，並且設定32.768K震盪器的腳位模式。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">AssignBit(PJOUT,   <span class="hljs-number">0x00</span>);<br>AssignBit(PJSEL0, (BIT4 | BIT5));      <span class="hljs-comment">// For XT1</span><br>AssignBit(PJDIR,   <span class="hljs-number">0xFFFF</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="SystemClock"><a href="#SystemClock" class="headerlink" title="SystemClock"></a>SystemClock</h4><ul><li><code>SystemClock_Init(MHZ)</code>：設定系統時鐘，並且檢查震盪器用作是否正常。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Enable LFXT1</span><br>ResetBit(CSCTL4, LFXTOFF);<br><br><span class="hljs-keyword">do</span><br>&#123;<br>    ResetBit(CSCTL5, LFXTOFFG);                   <span class="hljs-comment">// Clear XT1 fault flag</span><br>    ResetBit(SFRIFG1, OFIFG);<br>&#125;<br><span class="hljs-keyword">while</span> (SFRIFG1&amp;OFIFG);                            <span class="hljs-comment">// Test oscillator fault flag</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="常用的功能"><a href="#常用的功能" class="headerlink" title="常用的功能"></a>常用的功能</h4><ul><li><code>stoi()</code>：字串轉整數。</li><li><code>sort(array, arraylength)</code>：使用插入排序法，由小到大重新排列。</li></ul><h2 id="CC1350-與-Ti-RTOS"><a href="#CC1350-與-Ti-RTOS" class="headerlink" title="CC1350 與 Ti RTOS"></a>CC1350 與 Ti RTOS</h2><h3 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h3><p>大二的時候，因為教授的推薦，讓我接觸並嘗試轉寫了Ti的<a href="https://training.ti.com/introducing-simplelink-mcu-platform">SimpleLink無線射頻系列MCU</a>，並且應用在大專院校計畫身上。<br>這系列的MCU大部分都使用Arm Cortex-M的核心(M0、M3、M4F)，有寫Arm的應該不太陌生。<br><img src="https://www.ti.com/ds_dgm/images/fbd_swrs183b.gif" alt="CC1350 Diagram"><br>但當時我是第一次嘗試這類的開發，所以碰到很多卡關的地方。尤其是在於，Ti官方在Example有分成No-RTOS與Ti-RTOS，所以兩者的範例多寡有很大的不同。<br><img src="/../img/post/1110903_2012_c.png" alt="不同的範例就會有用Ti-RTOS與No-RTOS實現的差別"></p><p>好在Ti官方的Example裡面的程式碼不太難懂，一方面是SDK的功勞，很多功能都可以用HAL方式實現。加上程式碼不難移植，所以減少很多複雜的功夫。<br>就這樣子邊看前人的經驗，邊參照官方的資源文件，很順利的把我的大專計畫結束掉了。<br>講真的，光要啃Example的程式碼，就能知道學這些的程式基礎一定要很夠www。</p><p><del>奉勸各位學弟，大一的程式設計一定要學好。</del></p><blockquote><p>題外話：自從加入實驗室後，因為太常說到Ti的產品，好幾次都被社群朋友說是Ti推廣大使XD</p></blockquote><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>由於我在做大專的時候，由於焊接好的樣品不多，導致留下了很多洗好沒焊接的電路板。<br>就這樣過了一年，到這個暑假，突然某天不知哪來的動力，隨手抓了一把沒焊好還是全新的電路板，還有當初買的一些料。<br>加上從壞掉的板子拆下來的晶片，就髓手焊了3塊可以運作的小系統版。<br>後來我想說，正好之前買了一塊包有藍牙 + Sub GHz私有網路的CC1350開發版，那不如研究一下之前沒研究過的FreeRTOS，並且做點小玩具。<br><img src="/../img/post/1110903_2012_d.jpg" alt="CC1350 開發板"></p><p>購買到開發板之後，我先去Github翻了一圈，發現到有人放出可以跑FreeRTOS的開源專案。這讓我又激起想讓它動起來的動力了。<br><a href="https://github.com/MRazvan/cc1310_freertos_radio"><img src="https://gh-card.dev/repos/MRazvan/cc1310_freertos_radio.svg" alt="cc1310_freertos_radio - GitHub"></a></p><p>就正好興高采烈地去下載好FreeRTOS，並且嘗試要放到Project的時候…悲劇發生了。</p><p>我照之前的經驗，翻了官方的Example，看看有沒有關於FreeRTOS的範例可以參考，不出意外的是：「沒有」。<br>而後我去翻了<a href="https://dev.ti.com/tirex/explore/node?node=AKv5kxCPxdt3v7l-ja2Pbw__BSEc4rl__LATEST">官方的文件</a>，想說文件內有講到如何安裝FreeRTOS，那應該是可以完整被官方支援才對。直到我看到了這段話：</p><blockquote><p><strong>Note</strong>: FreeRTOS is not supported for the CC13xx or CC26xx device families, since these devices use TI-RTOS in ROM.</p></blockquote><p>看到了這段話之後，這是我當下的心情：<br><img src="https://i.kym-cdn.com/photos/images/newsfeed/000/053/748/Best-Cry-Ever.gif" alt="恩恩恩阿阿阿阿阿~~~"></p><p>後來想想，可能是因為：這系列的晶片是有包含M3&#x2F;M4F與M0的核心，其中M0已經被Ti官方固化成只能操作RF單元，導致FreeRTOS無法完美相容。，導致CC13xx與CC26xx沒有被官方正式支援FreeRTOS。</p><p>那既然不正式支援FreeRTOS，那倒是可以先學Ti官方的RTOS。</p><p>在這之前，大專的時候有簡單看過Ti RTOS的Example，但是當時我是使用No RTOS，也就是Bare-Metal的方式做開發，所以並未針對這方面下去研究。<br>於是為了讓自己能快速深入Ti的RTOS到底在幹嘛，我參考了兩份網路資源，並<a href="https://hackmd.io/@minexo79/rk57T8UJj">做成筆記</a>供未來複習。<br>而其中一份也順便讓我知道原來SimpleLink系列的MCU可以讓主單元與RF單元進入休眠模式，讓這U可以到如此低的功耗：</p><ol><li><a href="https://dev.ti.com/tirex/explore/node?node=ANmQTeaz4MGfaMYMtm-MTg__BSEc4rl__LATEST">Ti SimpleLink Academy (筆記大部分的Code都是來自於這份)</a></li><li><a href="http://training.eeworld.com.cn/TI/show/course/4006">CC1310 軟體速成 (與其說這是教學，不如說這叫做產品發布會)</a></li></ol><p>就這樣看了這兩個教學，我也拿了之前買的SHT40感測器，接上開發板，嘗試做了一個簡單的Demo，之後做完整一點再來寫一篇好了。</p><h2 id="C-MAUI"><a href="#C-MAUI" class="headerlink" title="C# MAUI"></a>C# MAUI</h2><p>這個暑假，也因為學校的研究關係，學了一個新的跨平台軟體框架 - MAUI。<br>這個框架是由微軟開發的，在此之前微軟有推出過叫做Xamarin的跨平台軟體框架。<br>據微軟前段時間開的發布會<del>兼佈道大會</del>所述：MAUI會成為Xamarin的進化版，與此同時也實現了「一種Code」即在不同的平台上執行的夢想。</p><center><iframe width="70%" height="400" src="https://www.youtube.com/embed/zp3Ja-jAjq4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center><p>抱著這樣的疑慮還有好奇，我跟著看了<a href="https://www.youtube.com/embed/DuNLR_NJv8U">這位國外Youtuber的4HR教學</a>，一步步地做起了第一個APP。<br>說真的，也只是照著這份教學來去小改一點東西：包括把資料的來源改成自己寫的，還有針對某些部分去做了點UI上的美化。<br><img src="/../img/post/1110903_2012_e.jpg" alt="MAUI APP"></p><p>抱怨一下，原本我在看4HR的教學的時候，影片上示範的Code是這樣：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">ICommand</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> Task <span class="hljs-title">foo</span>()</span><br>&#123;<br>    <span class="hljs-comment">// do smth...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但當我在我的電腦運行的時候，我發現Compiler不知道什麼是ICommand，導致一直出錯。<br>找過<a href="https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-800/">相關資料</a>後，才發現到是我的MVVM Toolkit是比較新的版本，所以一些Genreator的名字有被改掉得情況，比如下面的Code：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// Before:</span><br>[<span class="hljs-meta">ICommand</span>]<br><br><span class="hljs-comment">// Now:</span><br>[<span class="hljs-meta">RelayCommand</span>]<br></code></pre></td></tr></table></figure><p><del><strong>所以我說，微軟你到底在衝三小。</strong></del></p><h2 id="RISV伴學松"><a href="#RISV伴學松" class="headerlink" title="RISV伴學松"></a>RISV伴學松</h2><p><a href="https://hackmd.io/@accomdemy/HJ-aO3JO9"><img src="/../img/post/accomdathon.png" alt="伴學松"></a><br>暑假快完了，這個活動也快結束了。</p><p>坦白說，經過這次的活動，比其學到什麼是CPU，怎麼做CPU之外，比較重要的是如何一起陪伴，一起學習，還有如何享受這個過程。<br>過程中，我發現到有些人會開著遊戲邊參加活動，想說這樣就算了，比較誇張的是有人連需要使用的軟體都沒有安裝。<br>原本想著怎麼讓他們能更有參與感，就這樣到了8月底，在某次跟其他學友聊天的時候有談到這件事。他們安慰我，但也跟我說了一句話：</p><blockquote><p>你要做的不應該是這些，你要享受的是活動的過程，再這樣只會搞得更累。</p></blockquote><p>坦白說我還是不懂這句話的含意，雖然挑戰者一次比一次少，還發生了上述的狀況，讓我漸漸不去專注於原本想學的東西。<br>後來想著，其實我該做的事情已經做到了，就是找一群對這主題有興趣的人共同學習。也許我作為組織者，該做的應該就是這些，剩下的就給他們各自飛，才是對的做法。</p><p>題外話：對RISCV有興趣的可以參照<a href="https://hackmd.io/@accomdemy/BJprQ8Xjc">這一份共筆</a>開始從頭學起，希望可以幫到想學得人。</p><h2 id="實習"><a href="#實習" class="headerlink" title="實習"></a>實習</h2><p>這個暑假過後，我就不再是大三，而是該要面對殘酷社會的大四。<br>關於實習，我前後找了5~6間公司，好幾間都是回我只收正職。其中一間願意讓我過去與他們面談。<br>但面談時我出了差錯，以及太過於緊張，導致主管的問題我很多都是回答錯誤的。就這樣子失去了這個機會。<br><img src="https://i.kym-cdn.com/photos/images/newsfeed/000/053/748/Best-Cry-Ever.gif" alt="恩恩恩阿阿阿阿阿~~~"></p><p>之後我也在嘗試尋找公司，但時間就這樣過去，來到了我之前所設好的底線。<br>無奈之下，就轉回學校有簽約的公司，大多數都是沒錢的，雖然失望但也只能挑這些了。<br>因為我的習慣會先去問，所以就這樣問了其中一間公司，還有沒有實習的機會。<br>而也就是這個機會，讓我要在下半年，開了不同的學習主線：無刷直流馬達。</p><p>一樣的，我去找了幾個教學資源，另外也買了之後會用到的開發板，希望能在實習階段可以快速步上正軌：</p><ol><li><a href="http://bbs.eeworld.com.cn/thread-1181261-1-1.html">亲手教你转起一台无刷电机 - 煲仔滷煮</a></li><li><a href="http://nfuee.nfu.edu.tw/ezfiles/42/1042/attach/81/pta_26435_4137435_05284.pdf">直流無刷馬達原理與驅動控制 - 張雯翔、張家榮、許凱翔、常文峻</a></li><li><a href="https://www.orientalmotor.com.tw/om/knowledge/uroko_bl/bl02.html">無刷馬達大小事 5分鐘就上手 - 東方馬達</a></li></ol><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這個暑假真的過得滿充實的，其實還有發生一件事情，讓我成長很多，但基於某些原因我不能公布。<br>大概就這樣吧，要開學了，也該收心，準備最後專題的衝刺與迎接未來的準備。</p><p><del>喔對，校長你甚麼時候會出來探探頭。</del></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.ti.com/product/CC1350">CC1350 data sheet, product information and support - Ti</a></li><li><a href="https://dev.ti.com/tirex/explore/node?node=ANmQTeaz4MGfaMYMtm-MTg__BSEc4rl__LATEST">SimpleLink Academy - Ti</a></li><li><a href="https://dev.ti.com/tirex/explore/node?node=AKv5kxCPxdt3v7l-ja2Pbw__BSEc4rl__LATEST">SimpleLink MCU SDK User’s Guide  - Ti</a></li><li><a href="http://training.eeworld.com.cn/TI/show/course/4006">CC1310 軟體速成 - 德州儀器</a></li><li><a href="http://bbs.eeworld.com.cn/thread-1181261-1-1.html">亲手教你转起一台无刷电机 - 煲仔滷煮</a></li><li><a href="http://nfuee.nfu.edu.tw/ezfiles/42/1042/attach/81/pta_26435_4137435_05284.pdf">直流無刷馬達原理與驅動控制 - 張雯翔、張家榮、許凱翔、常文峻</a></li><li><a href="https://www.orientalmotor.com.tw/om/knowledge/uroko_bl/bl02.html">無刷馬達大小事 5分鐘就上手 - 東方馬達</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>個人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>半年更新</title>
    <link href="/2022/07/17/halfyear-update/"/>
    <url>/2022/07/17/halfyear-update/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距離上次更新Blog已經過了快半年有，因為現實的原因（打工、課程、專題…等）消失一陣子，導致原本想要達成的每周一個更新的目標也無法實現。<br>多次也想說上來更新一下Blog，寫寫廢文甚麼的，後來也都因為懶癌也沒有上來更新www，剛好暑假到了，趁這個時候來分享一下我遇到什麼事，以及我下一年想要達成的目標，一年後再來驗收看看我到底有沒有做到。</p><blockquote><p><del>（我就懶，YEAH）</del></p></blockquote><h2 id="筆電"><a href="#筆電" class="headerlink" title="筆電"></a>筆電</h2><p>我有個弟弟，剛好今年他要升大學，由於他的理想學校離家很遠，剛好我也對<a href="https://www.lenovo.com/hk/zf/laptops/legion/lenovo-legion-y-series-laptops/IdeaPad-L340-15IRH-Gaming/p/88IPL301161">原本的電腦</a>有很多不爽的地方，於是我決定買一台新筆電，原本舊的筆電就整理過後整台過給他。<br><img src="https://www.lenovo.com/medias/lenovo-ideapad-l340-15-gaming-feature-01.jpg?context=bWFzdGVyfHJvb3R8NjQ4NzN8aW1hZ2UvanBlZ3xoN2YvaDIzLzEwMDg4MTM3OTE2NDQ2LmpwZ3xhYzcwMWUxYTYyNTJiY2M1YTQ0MThjMzYzOGRmZGVhYWRiOTdmY2Q3ZmYyNTNjNGQ3ZThmMmM2M2JmMjQzMmQ1&w=1920" alt="原本的舊電腦"><br>原本的舊電腦令我不爽的地方：</p><ul><li>電池容量小（45Wh），沒內顯，所以超級耗電。</li><li>研究方向改變，I5 9代不能扛起現在的任務。</li><li>筆電轉軸特別鬆，不好好保護很容易斷掉。</li><li>當初是特價品，拆開後發現可換元件的用料都是來路不明的廠商。</li></ul><p>經過幾周的考慮，以及一年前看到惠普於對岸推出的新光影精靈系列，然後就被這台深深迷上，再於幾天做好功課，找到特價又大碗的型號之後，<del>讓我每晚睡不著覺的</del>光影精靈（台版）就到我手上了。<br><img src="/../img/post/1110717_1002_g.jpg" alt="好香好香的外箱"><br><img src="/../img/post/1110717_1002_f.jpg" alt="新電腦，花了我30000多"><br>原本要到對岸淘寶&#x2F;京東買下這一台，但後來選擇國內通路有兩個原因：</p><ol><li>我喜歡沒注音的鍵盤，無奈對岸通路沒有全球保固。</li><li>這一台的配備（R7-5800H &#x2F; RTX3050），加上當時30000出頭的價格，以及後續多送我8G的記憶體。</li><li><del>30000元相比原本18000的筆電，還是30000元的讓我安心。</del></li></ol><p>於是從買來到目前為止，已經快兩個月了，我對它依舊還是很滿意。（除了該死的微軟BUG）</p><h2 id="黑貓框架"><a href="#黑貓框架" class="headerlink" title="黑貓框架"></a>黑貓框架</h2><p><a href="https://github.com/minexo79/CatFramework_For_MSP430FR59xx"><img src="https://gh-card.dev/repos/minexo79/CatFramework_For_MSP430FR59xx.svg" alt="minexo79/CatFramework_For_MSP430FR59xx - GitHub"></a><br><del>大家有興趣不訪按個星星www</del></p><p>這是我原本要讓自己能更容易開發MSP430，將幾個常用的變數及功能整合起來，變成一個讓自己更方便開發的個人函式庫。<br><img src="/../img/post/1110717_1002_a.jpg" alt="MSP-EXP430FR5994"><br>但幾年大學生活與研究下來，發現到光有函式庫是不夠的，原因在於：</p><blockquote><p><strong>功能不會只有一種，而是會根據需求做變化</strong>。</p></blockquote><p>於是決定開始動手並整理此函式庫，並用我在網路社群活躍的暱稱，取名叫「黑貓框架（CatFramework）」。<br>並且希望我能在一年後能讓這個框架達成下面我列出的功能。並每個月透過Blog更新做了哪些部分。</p><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><p>這個框架讓開發者能類似Arduino方便的功能，不用透過暫存器（Register）設定430的某些單元。比如下面透過暫存器設定UART的程式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// UART Initialize</span><br>P2SEL0 &amp;= ~(BIT0 | BIT1);                  <span class="hljs-comment">// P2.0: TX. P2.1: RX</span><br>P2SEL1 |= (BIT0 | BIT1);<br><br>UCA0CTLW0 |= (UCSWRST | UCSSEL__SMCLK);    <span class="hljs-comment">// Hold UART, UARTCLK: SMCLK</span><br><br>UCA0BR0 = <span class="hljs-number">104</span>;                             <span class="hljs-comment">// 1Mhz 9600bps</span><br>UCA0BR1 = <span class="hljs-number">0</span>;<br><br>UCA0CTLW0 &amp;= ~(UCSWRST);                   <span class="hljs-comment">// Initialize UART State Machine</span><br><br>UCA0IE |= UCRXIE;                          <span class="hljs-comment">// Rx Interrupt</span><br></code></pre></td></tr></table></figure><p>但如果改用此框架，只需輸入一行即可完成設定UART單元。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Initialize_UART(UART0, <span class="hljs-number">9600</span>, NONIE);       <span class="hljs-comment">// Configure UART0, 9600 bps, disable TX/RX Interrupt</span><br></code></pre></td></tr></table></figure><h3 id="支援的單元"><a href="#支援的單元" class="headerlink" title="支援的單元"></a>支援的單元</h3><ul><li><input checked="" disabled="" type="checkbox"> SystemClock</li><li><input checked="" disabled="" type="checkbox"> GPIO（僅有Initialize Pin功能）</li><li><input checked="" disabled="" type="checkbox"> Timer（僅支援TimerAx單元）</li><li><input disabled="" type="checkbox"> ADC</li><li><input checked="" disabled="" type="checkbox"> UART</li><li><input disabled="" type="checkbox"> I2C</li><li><input disabled="" type="checkbox"> SPI</li><li><input disabled="" type="checkbox"> DMA</li></ul><h2 id="FPGA-amp-AI"><a href="#FPGA-amp-AI" class="headerlink" title="FPGA &amp; AI"></a>FPGA &amp; AI</h2><p>這算是有個淵源…所以我拆成兩個部分。</p><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><p>大三學校某節課，老師請了一位FPGA的講師來分享一個AI加速器的框架。當下看到Python我頓時有些興致，原因在於一開始學的程式，除了C之外就是Python。<br>就這樣到當天，與其說是講課，不如說是來噹我們，甚至有意<del>且強硬的</del>把我拉進去另一個領域，使得我開始對FPFA及AI感到灰心。更是完全都不想碰這些東西。<br><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcShcomCvB-mRTZ39rlAde5WAryB5VttX4aY5fOPgpnThTocOp35CbIaRRvGlDxak4paHMM&usqp=CAU" alt="強人鎖男"><br>某天我心血來潮（其實是嫌錢太多），買了一個對岸的FPGA開發板 - Tang Nano 9K。<br><img src="/../img/post/1110717_1002_b.jpg" alt="Tang Nano 9K"><br>正想說怎麼玩的時候，想到當時講師說的那個框架，結果到<a href="https://github.com/litex-hub/litex-boards/tree/master/litex_boards/platforms">Github一查</a>發現，該開發板有支援到這個框架。<br><img src="/../img/post/1110717_1002_c.png"><br>到此時我決定嘗試在這塊開發板上跑看看，於是就把Ubuntu系統安裝回來，也很快地用了一周的時間把所有工具包安裝上去。<br>但要真正跑上去的時候遇到了一堆問題。但好在有網友及社群的人幫忙，總算把框架成功地跑在Tang Nano 9K上。<br><img src="/../img/post/1110717_1002_d.jpg"></p><h3 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h3><p>原本想說這樣就結束了，而我也把成果整理一下，並到一個社團 - <a href="https://www.accomdemy.org/">伴伴學</a>，跟其他成員分享我到底幹了甚麼。<br>在當天分享完畢後，社團內的兩位成員邀請我在當天的晚上聊聊關於我下午分享的內容，也邀請我一起開設暑假的讀書會。<br>其中一位成員，剛好也是瑞昱的員工，也藉這個機會鼓勵我繼續學習關於FPGA及AI的知識。與他們聊完之後，我也對FPFA及AI開始改觀。<br>在當天晚上，我跟另一位成員快速的把活動建立好，也開始對外宣傳。而六月一整個月，我跟十幾位想要參加的成員討論活動如何進行。<br>然後今年（民國111年）的暑假，這個活動就開始了…<br><a href="https://hackmd.io/@accomdemy/HJ-aO3JO9"><img src="/../img/post/accomdathon.png" alt="伴學松"></a></p><h3 id="ZYNQ"><a href="#ZYNQ" class="headerlink" title="ZYNQ"></a>ZYNQ</h3><p>為了這個活動，剛好這學期有得到令我滿意的成績，所以又立馬<del>砸錢</del>買了一個FPGA開發板。<del>（其實也不多，但是到對岸買可以省500元）</del><br><img src="/../img/post/1110717_1002_e.jpg" alt="Microshape Z7 Lite"><br>買他的原因：這塊上面的SoC(Xilinx ZYNQ)除了FPGA單元以外，裡面還外加了雙核心的ARM處理器<del>，所以可以跑LINUX!!!!</del><br>而且買這塊也有個想法：從頭學習當初學校教的內容，以及跟著上面的讀書會，看能不能把自己製作的CPU跑在這塊開發板上。<br><a href="http://xilinx.eetrend.com/d6-xilinx/blog/2017-07/11621.html"><img src="http://xilinx.eetrend.com/files-eetrend-xilinx/blog/201707/11621-30807-006.jpg" alt="Ubuntu On ZYNQ by judyzhong"></a></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這一學期真的是很戲劇化的學期。<br>從已經對AI絕望，到重拾想學習AI，還有抱著學習新技術的決心，找了一群志同道合的網友辦了讀書會…等。這些都是我從沒想過會發生的事情。<br>剛好也要大四了（<del>要出社會了嗚嗚嗚</del>），再半年過後我就要嘗試踏入職場，慢慢踏入甚麼是大人的世界。<br>希望未來還能像這樣子亂噴一通幹話，能繼續學習我沒學過的事物。</p><p><del>欸好啦，VM家的VTuber很香欸，快點去看啦。</del></p>]]></content>
    
    
    <categories>
      
      <category>個人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(三)</title>
    <link href="/2022/03/20/lora-as32-3/"/>
    <url>/2022/03/20/lora-as32-3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次的Blog有提到：目前的韌體已經可以正常的收發，唯有不定時會出現發送與接收不一致的異常。判斷可能是Arduino內的接收方式與我們認知的有些不同。<br><img src="/img/post/1110204_1433_d.png" alt="正常收到的數據"><br><img src="/img/post/1110204_1433_e.png" alt="收到的數據不完整，顯示ERROR"><br>這段期間我嘗試了許多作法，比如更改接收的函式，嘗試將接收端的接收間隔延長…等等，但都無助於解決問題。<br>也因為這段時間要忙專題和大專院校的事情，很少時間專注於自己的研究，所以這篇Develop Blog（應該算吧？）才會那麼晚出來。</p><h2 id="測試步驟"><a href="#測試步驟" class="headerlink" title="測試步驟"></a>測試步驟</h2><p>為了解決這一系列的問題，我自己列了一套測試步驟：</p><ol><li>Arduino + AS32 -&gt; CP2102 + AS32 TX測試</li><li>CP2102 + AS32 -&gt; Arduino + AS32 RX測試</li><li>Arduino + AS32 &lt;&gt; Arduino + AS32 TRX測試</li></ol><p><img src="/../img/post/CP2102.jpg" alt="CP2102"></p><p>上面的一跟二是確認這兩顆模組的傳輸方式以及效果如同說明書所述，並且確認兩顆模組運作正常，排除硬體面的問題。<br>AS32模組與CP2102的接法如下：（採用模式0，將MD0與MD1接地，使其保持0）<br><img src="/../img/post/1110320_2143_a.png" alt="CP2102 + AS32模組接法"></p><h3 id="測試步驟一"><a href="#測試步驟一" class="headerlink" title="測試步驟一"></a>測試步驟一</h3><ul><li>Arduino 連接 AS32 當作傳輸端，燒錄傳輸程式</li><li>CP2102 連接 AS32 當作接收端，開啟任一Serial Monitor檢視資料接收狀況</li></ul><p>測試結果如下：<br><img src="/../img/post/1110320_2143_b.png" alt="測試步驟一"></p><h3 id="測試步驟二"><a href="#測試步驟二" class="headerlink" title="測試步驟二"></a>測試步驟二</h3><ul><li>CP2102 連接 AS32 當作傳送端，開啟任一Serial Monitor並傳輸封包</li><li>Arduino 連接 AS32 當作接收端，燒錄接收程式，開啟另一Serial Monitor檢視資料接收狀況</li></ul><p>測試結果如下：<br><img src="/../img/post/1110320_2143_c.png" alt="測試步驟二"></p><p>經過交叉的測試，在單一封包，不固定時間發送的情況下，兩顆模組並未有任何掉包的情況產生，所以可以排除硬體面的問題。</p><h3 id="測試步驟三"><a href="#測試步驟三" class="headerlink" title="測試步驟三"></a>測試步驟三</h3><ul><li>一 Arduino 連接 AS32 當作傳輸端，燒錄傳輸程式</li><li>另一 Arduino 連接 AS32 當作接收端，燒錄接收程式，開啟另一Serial Monitor檢視資料接收狀況</li></ul><p>測試結果如下：<br><img src="/../img/post/1110320_2143_d.png" alt="測試步驟三"><br>再連續且不中斷傳輸的情況下，反而發生了資料錯位的問題。（就卡在這裡阿阿阿阿阿qwq</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>先放出程式碼（關鍵部份）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp">currentMillis = <span class="hljs-built_in">millis</span>();<br><span class="hljs-keyword">if</span>(currentMillis - preMillis &gt;= interval_ms)<br>&#123;<br>    preMillis = currentMillis;<br><br>    <span class="hljs-keyword">if</span>((PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">// read message</span><br>        <span class="hljs-keyword">while</span>(readCount &lt; <span class="hljs-number">5</span>)<br>        &#123;<br>            readBuffer[readCount] = Serial1.<span class="hljs-built_in">read</span>();<br>            readCount++;<br>        &#125;<br><br>        Serial1.<span class="hljs-built_in">flush</span>();<br><br>        PORTB ^= (<span class="hljs-number">1</span> &lt;&lt; PB5);<br>        <br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received &quot;</span>);<br>        Serial.<span class="hljs-built_in">print</span>(++_count);<br>        Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; Times.\tBuffer: &quot;</span>);<br>        <br>        <span class="hljs-keyword">if</span>(readBuffer[readCount - <span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;\r&#x27;</span> &amp;&amp; <br>            readBuffer[readCount - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            Serial.<span class="hljs-built_in">print</span>(readBuffer);<br>        <span class="hljs-keyword">else</span><br>            Serial.<span class="hljs-built_in">println</span>(readBuffer);<br><br>        readCount = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(readBuffer, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><br>        PORTB ^= (<span class="hljs-number">1</span> &lt;&lt; PB5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>將其中第四到第六行的判斷改成如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">preMillis = currentMillis;<br><br><span class="hljs-comment">// get current AUX state and set previous AUX state</span><br>preState = state;<br>state = (PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) &gt;&gt; <span class="hljs-number">4</span>;<br><br><span class="hljs-comment">// compare two states if they&#x27;re from high to low</span><br><span class="hljs-keyword">if</span>(preState == <span class="hljs-number">1</span> &amp;&amp; state == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>運行結果：<br><img src="/../img/post/1110320_2143_e.png" alt="運行結果"></p><p>好欸，成功了！！！</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>首先是判斷狀態的部份：（意即原本的第6行）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>((PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>這行判斷式的意思為：<strong>如果PB4腳位輸入為低準位(LOW)，則進入IF判斷式內運行。</strong></p><blockquote><p>註：PB4對應Arduino Mega的腳位是第10腳位，對應Arduino Uno的腳位則是第12腳位。</p></blockquote><p>但這樣寫會有一個問題：<strong>這樣真的會是我們原先需要的結果嘛？</strong></p><blockquote><p>這個寫法可能在Arduino的世界沒太多人見過，這是使用AVR單晶片暫存器的寫法，相較於Arduino Core，除了執行速度有<strong>稍微</strong>提升以外，可以叫出Arduino Core反而無法實現的功能。（Ex：更多的中斷）</p></blockquote><p>將上面的暫存器內的值變成8位元後來看一下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">       <span class="hljs-number"> 7 </span>6<span class="hljs-number"> 5 </span>4<span class="hljs-number"> 3 </span>2<span class="hljs-number"> 1 </span>0<br>PINB 0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0 0<br>PB4   <span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<br>&amp; ------------------<span class="language-yaml"><span class="hljs-meta">---</span></span><br><span class="language-yaml">     <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">0</span></span><br></code></pre></td></tr></table></figure><p>看起來什麽問題，但如果PB4是1呢？</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">       <span class="hljs-number"> 7 </span>6<span class="hljs-number"> 5 </span>4<span class="hljs-number"> 3 </span>2<span class="hljs-number"> 1 </span>0<br>PINB 0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0 0<br>PB4   <span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>1<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 0 </span>0<br>&amp; ------------------<span class="language-yaml"><span class="hljs-meta">---</span></span><br><span class="language-yaml">     <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">10</span></span><br></code></pre></td></tr></table></figure><p>欸不是，怎變成10了？<br>很顯然的，我忘了把數字「往右移」回來，所以他不是真正要的狀態。<br>更改的方式只須在後面新增一段往右位移的程式碼即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(((PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) &gt;&gt; <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p>關於位元移位的操作：可以去Google搜尋：<a href="https://www.google.com/search?q=%E4%BD%8D%E5%85%83%E9%81%8B%E7%AE%97%E5%AD%90">bitwise Operator 位元運算子</a></p></blockquote><p>但這樣還是無從解決問題。因為關鍵在於：<strong>AS32的AUX腳位的邏輯判斷，以及Arduino Core的Serial處理方式！！</strong><br>先來看一下AS32的Datasheet：<br><img src="/img/post/1110204_1433_a.png" alt="AS32 Lora Module Datasheet 節錄"></p><p>當接收到由發送端傳來的訊號時，AUX腳位會先從高準位(HIGH)變成低準位(HIGH)，然後才會開始透過TX腳發送收到的訊號內容給MCU。<br>上面那樣的Code其實是沒什麽問題，但關鍵在於<code>Serial.read()</code>這一段程式碼。<br>它會先檢查一段時間，如果在RX腳位沒收到任何字元，會回傳數字-1給主程式。<br>而我上面的寫法並沒有考慮準位的變化，反而讓Arduino判斷到低準位就開始直接收訊息，因此出現了資料錯位的情況。<br>解決方式如同上面所述，加入上次準位的判斷，這樣子就可以解決問題了。</p><p><img src="/../img/post/1110320_2143_f.png" alt="運行結果"></p><blockquote><p>就算到2000多次，還是一樣可以完美收到封包的內容了呢！</p></blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>既然問題解決了，那應該也可以規劃實驗傳輸距離的部份了，但在這之前，我還想先知道一個部份：訊號強度（RSSI）。<br>有了RSSI，就可以知道當下訊號狀況是好還是差。如果可以取得這個資料，那在傳輸距離的實驗上會有一大部份的幫助。<br>另外在這裡我也想感謝伴伴學的幾位學友，如果沒有你們幫忙，這個問題也不會解決，我可能會卡的很久，包含這一篇Blog。</p><h2 id="開發照片"><a href="#開發照片" class="headerlink" title="開發照片"></a>開發照片</h2><p><img src="/../img/post/1110320_2143_g.jpg" alt="開發照片"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://www.ashining.com/product_view1.aspx?t=93&cid=133#pro">澤耀科技 AS32-D20 無線透傳模組說明書</a></li><li><a href="https://www.arduino.cc/reference/en/language/functions/time/millis/">millis() - Arduino Reference</a></li><li><a href="https://www.arduino.cc/reference/en/language/functions/communication/serial/read/">Serial.read() - Arduino Reference</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>硬體</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LoRa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(二)</title>
    <link href="/2022/02/04/lora-as32-2/"/>
    <url>/2022/02/04/lora-as32-2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這段時間把AS32 LoRa模組相關的資料大致上看過一遍，需要注意的地方大概如下：</p><ul><li>這一顆LoRa模組在傳輸的操作上需要配合ACK腳位，特別是在「發送端的第一筆資料」和「在接收前的ACK腳位」。在程式撰寫上可以透過IO腳位的外部中斷來配合操作。</li></ul><p><img src="/img/post/1110204_1433_a.png" alt="AS32 Lora Module Datasheet 節錄"></p><ul><li>在模組內工作模式的切換，要透過IO的腳位設定，才可以切換該模組的工作模式。</li></ul><table><thead><tr><th>模式切換</th><th>MD0腳位</th><th>MD1腳位</th></tr></thead><tbody><tr><td>一般工作模式</td><td>腳位拉低(Input)</td><td>腳位拉低(Input)</td></tr><tr><td>模組設定模式</td><td>腳位拉高(Output)</td><td>腳位拉高(Output)</td></tr></tbody></table><p><img src="/img/post/1100107_0842_d.png" alt="AS32 Lora Module Datasheet 節錄"></p><ul><li>同時，之前跟幾個群組中得知無線射頻並不是隨隨便便都能用的，最好在購買及使用前先看一下當地的法規規範，以免觸法。以台灣的無線射頻法規，一般使用者可使用的是920～928 MHz這一範圍的頻段。<br>其中海上使用的頻段為926～928 MHz，而其他場域可使用920～925 MHz，要購買類似頻段的模組要注意一下當地的法規標示。</li></ul><p><img src="/img/post/1110204_1433_b.png" alt="低功率射頻器材技術規範 節錄"></p><ul><li>最後使用這顆LoRa模組需要注意一點：這顆模組並未有拿到NCC(國家通訊傳播委員會)的認證，因此在「台灣境內」僅能用於個人實驗，不可拿去實際場域運作！</li></ul><h2 id="測試方式"><a href="#測試方式" class="headerlink" title="測試方式"></a>測試方式</h2><p>這裡使用兩塊Mega 2560，其中一塊僅連接AS32，並且每秒廣播一筆數據，另一塊連接AS32作為接收端之外，也與PC透過USB連接，並使用Serial Monitor顯示A32收到的數據。<br><br><img src="/img/post/1110204_1433_c.png" alt="裝置連接架構圖"></p><h3 id="發送端程式碼"><a href="#發送端程式碼" class="headerlink" title="發送端程式碼"></a>發送端程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/io.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> interval_ms  1000</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> currentMillis = <span class="hljs-number">0</span>, preMillis = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// put your setup code here, to run once:</span><br>    Serial1.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>    DDRB |= (<span class="hljs-number">1</span> &lt;&lt; DDB5);<br>    DDRB &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; DDB4);<br>    PORTB &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; PB5);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    currentMillis = <span class="hljs-built_in">millis</span>();<br>    <br>    <span class="hljs-keyword">if</span>(currentMillis - preMillis &gt;= interval_ms)<br>    &#123;<br>        preMillis = currentMillis;<br>      <br>        Serial1.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-keyword">while</span>((PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) == <span class="hljs-number">0</span>);<br>        PORTB ^= (<span class="hljs-number">1</span> &lt;&lt; PB5);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接收端程式碼"><a href="#接收端程式碼" class="headerlink" title="接收端程式碼"></a>接收端程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;avr/io.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;util/delay.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> interval_ms 6</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> currentMillis = <span class="hljs-number">0</span>, preMillis = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> readCount = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> readBuffer[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;&quot;</span>, readIndex = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">// put your setup code here, to run once:</span><br>    Serial1.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>    Serial.<span class="hljs-built_in">begin</span>(<span class="hljs-number">9600</span>);<br>    <br>    DDRB |= (<span class="hljs-number">1</span> &lt;&lt; DDB5);<br>    DDRB &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; DDB4);<br>    PORTB &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; PB5);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    currentMillis = <span class="hljs-built_in">millis</span>();<br>    <span class="hljs-keyword">if</span>(currentMillis - preMillis &gt;= interval_ms)<br>    &#123;<br>        preMillis = currentMillis;<br><br>        <span class="hljs-keyword">if</span>((PINB &amp; (<span class="hljs-number">1</span> &lt;&lt; PB4)) == <span class="hljs-number">0</span>)<br>        &#123;<br><span class="hljs-comment">//            _delay_ms(2);</span><br>            <br>            <span class="hljs-keyword">for</span>(readIndex = <span class="hljs-number">0</span>;readIndex &lt; <span class="hljs-number">5</span>; readIndex++)<br>              readBuffer[readIndex] = Serial1.<span class="hljs-built_in">read</span>();<br>            Serial1.<span class="hljs-built_in">flush</span>();<br>    <br>            PORTB ^= (<span class="hljs-number">1</span> &lt;&lt; PB5);<br>    <br>            Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received &quot;</span>);<br>            Serial.<span class="hljs-built_in">print</span>(++readCount);<br>            Serial.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; Times. Buffer: &quot;</span>);<br>            <br>            <span class="hljs-keyword">if</span>(readBuffer[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; readBuffer[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;3&#x27;</span>)<br>                Serial.<span class="hljs-built_in">print</span>(readBuffer);<br>            <span class="hljs-keyword">else</span><br>                Serial.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;ERROR!&quot;</span>); <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="過程"><a href="#過程" class="headerlink" title="過程"></a>過程</h2><p>上述程式碼中，都有引入<code>millis()</code>以替代<code>delay()</code>，這麼作的方式是利用Arduino Mega 2560內的Timer 計時，可以讓發送端的發送時間更為準確，也不會讓CPU有卡住的情況，導致發送時間不一致。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/** 利用millis取代delay **/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> interval_ms 1000                        <span class="hljs-comment">// 設定間隔時間</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> currentMillis = <span class="hljs-number">0</span>, preMillis = <span class="hljs-number">0</span>; <span class="hljs-comment">// 現在及前次時間</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 你的程式碼...</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    currentMillis = <span class="hljs-built_in">millis</span>();                       <span class="hljs-comment">// 獲取現在時間</span><br>    <span class="hljs-keyword">if</span>(currentMillis - preMillis &gt;= interval_ms)    <span class="hljs-comment">// 比較前次時間，需要兩者之差大於或相等設定間隔</span><br>    &#123;<br>        preMillis = currentMillis;                  <span class="hljs-comment">// 前次時間更改</span><br>        <span class="hljs-comment">// 你的程式碼...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目前的韌體已經可以正常的收發，唯有不定時會出現發送與接收不一致的異常。目前判斷可能是Arduino內的接收方式與我們認知的有些不同，未來若要開發AS32的函式庫可以朝以下兩者前進：</p><ul><li>更改模組廣播模式</li><li>完善韌體校驗機制<br></li></ul><p><img src="/img/post/1110204_1433_d.png" alt="正常收到的數據"><br><img src="/img/post/1110204_1433_e.png" alt="收到的數據不完整，顯示ERROR"></p><h2 id="開發照片"><a href="#開發照片" class="headerlink" title="開發照片"></a>開發照片</h2><p><img src="/img/post/1110204_1433_f.png" alt="1110204_1433_f"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://www.ashining.com/product_view.aspx?t=93&cid=133">澤耀科技 AS32-D20 產品介紹</a></li><li><a href="http://www.ashining.com/product_view1.aspx?t=93&cid=133#pro">澤耀科技 AS32-D20 無線透傳模組說明書</a></li><li><a href="https://www.ncc.gov.tw/chinese/files/20071/%e4%bd%8e%e5%8a%9f%e7%8e%87%e5%b0%84%e9%a0%bb%e5%99%a8%e6%9d%90%e6%8a%80%e8%a1%93%e8%a6%8f%e7%af%84%e5%85%a8%e6%96%87%20-1090813v2%20-%20%e5%8a%a0%e7%9b%ae%e9%8c%84.pdf">國家通訊傳播委員會 低功率射頻器材技術規範</a></li><li><a href="https://www.arduino.cc/reference/en/language/functions/time/millis/">millis() - Arduino Reference</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>硬體</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LoRa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(一)</title>
    <link href="/2022/01/04/lora-as32-1/"/>
    <url>/2022/01/04/lora-as32-1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>(111&#x2F;2&#x2F;4 更新)<br>最後使用這顆LoRa模組需要注意一點：這顆模組並未有拿到NCC(國家通訊傳播委員會)的認證，因此在「台灣境內」僅能用於個人實驗，不可拿去實際場域運作！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>實驗室既有的LoRa模組在操作的時候，因模組內自身韌體的操作方式，造成傳輸時間需要一秒以上，對於省電的應用不是很友善。<br>因此我開始到對岸的網路中，找到了幾家看似不錯的模組，而最近終將一款模組透過各種方法(?搞到我的手上了。</p><h2 id="澤耀科技-AS32-D20"><a href="#澤耀科技-AS32-D20" class="headerlink" title="澤耀科技 AS32-D20"></a><a href="http://www.ashining.com/product_view.aspx?t=93&cid=133">澤耀科技 AS32-D20</a></h2><p><img src="/img/post/24703.jpg" alt="澤耀科技 AS32-D20"></p><p>我買的規格是北美頻段(915MHz)，發送功率為100mW，根據官方的數據，最遠可以傳至直線距離5公里遠。<br>依照官方給的說明，該模組的北美頻段是在900MHz~931MHz這個頻段區間，可以透過切換頻道的方式更改頻率以及發送功率。</p><h3 id="規格"><a href="#規格" class="headerlink" title="規格"></a>規格</h3><blockquote><p>以下資訊均來自<a href="http://www.ashining.com/product_view1.aspx?t=93&cid=133#pro">該模組說明書</a>，本人僅會列出重要的部分。</p></blockquote><ul><li>支持3.6V~5.5V的供給電壓，電壓過小會影響到實際輸出功率。</li><li>理論值(100mW)最遠傳輸距離為5000公尺。</li><li>有四種工作模式，可利用MD0跟MD1兩隻GPIO控制。</li><li>我購買的是915MHz(北美頻段規格)，可發送頻段範圍為900~931MHz。<ul><li>頻率切換方式為：<code>(每一個頻道號碼 * 1MHz) + 900MHz</code>。<ul><li>頻道號碼為15，則頻率為：<code>(1 * 15) + 900 = 915MHz</code>。</li></ul></li></ul></li><li>發送功率為<code>11~20dbm</code>，有四段強度可調(0~3)。<ul><li>每一段訊號強度均增加3dbm。</li></ul></li><li>使用UART方式傳輸封包。</li></ul><h2 id="開箱"><a href="#開箱" class="headerlink" title="開箱"></a>開箱</h2><p>不說這外盒真的有點大，還以為是要裝什麼貴重的儀器XDD<br><img src="/img/post/24709.jpg" alt="外盒"></p><p>通常購買無線模組，都是以一組(2顆)為單位去購買的。<br>跟剛剛的盒子比較起來，這差別蠻大的…（感覺有點浪費包裝Orz）<br><img src="/img/post/24710.jpg" alt="AS32實體照"></p><h2 id="簡單測試"><a href="#簡單測試" class="headerlink" title="簡單測試"></a>簡單測試</h2><p>以下測試均照原廠設定。（強度為3，頻段為915MHz，模組透過設定為一般模式，發送模式為透明廣播）<br><img src="/img/post/1110107_0842_c.png" alt="原廠設定1"><br><img src="/img/post/1110107_0842_d.png" alt="原廠設定2"><br><img src="/img/post/1110107_0842_b.png" alt="原廠設定3"></p><h3 id="消耗電流"><a href="#消耗電流" class="headerlink" title="消耗電流"></a>消耗電流</h3><p>先測試模組的電力消耗情況，上電時的電流為9mA。瞬間傳輸時的電流為140mA左右。<br><img src="/img/post/1110107_0842_a.png" alt="消耗電流"></p><h3 id="延遲"><a href="#延遲" class="headerlink" title="延遲"></a>延遲</h3><p>上次的模組因為封包準備與發出時間過久，導致操作起來不是很順暢。<br>當天測試的封包大小沒有詳細計算，但用示波器測量ACK腳位（確認模組是否在忙碌狀態）可以發現延遲不是很高，落在170ms左右。<br><img src="/img/post/24706.jpg" alt="延遲"></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這款模組在簡單測試下比之前實驗室的LoRa模組有相對良好的表現，並且操作方面也相對的簡易許多，甚至可以自己造協定。<br>這讓我想起之前購買的HC12模組（頻率為433MHz），某方面來說這顆模組的功能與效果與AS32差不多。<br><img src="/img/post/24719.jpg" alt="HC12"><br>但是功耗的部份，我個人覺得有點高，得需要做過一些調整才可以上場。（比如調低發送強度，更換比較強力的穩壓IC…等）</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://www.ashining.com/product_view.aspx?t=93&cid=133">澤耀科技 AS32-D20 產品介紹</a></li><li><a href="http://www.ashining.com/product_view1.aspx?t=93&cid=133#pro">澤耀科技 AS32-D20 無線透傳模組說明書</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>硬體</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LoRa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SIM7020E 開箱</title>
    <link href="/2021/12/19/sim7020e/"/>
    <url>/2021/12/19/sim7020e/</url>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>因為現實研究的關係，需要用到NBIoT的網路服務。<br>原本有考慮中華電信的預付卡，但台灣的NBIoT電信服務皆須企業才可以提出申請，只有遠傳電信可以提供給個人使用。<br>感謝<a href="https://discord.gg/azQUs8Y2fY">伴伴學DC</a>的laoming與elton陪我在今天的下午一起研究。</p><h2 id="SIM7020E-簡介"><a href="#SIM7020E-簡介" class="headerlink" title="SIM7020E 簡介"></a>SIM7020E 簡介</h2><blockquote><p>節錄自 <a href="https://www.icshop.com.tw/product-page.php?28187">icshop</a> 與 <a href="https://www.simcom.com/product/SIM7020X.html">SIMCOM官網</a></p></blockquote><ul><li>頻段支援B1&#x2F;B3&#x2F;B5&#x2F;B8&#x2F;B20&#x2F;B28，適用於台灣三大電信</li><li>支援HTTP(S)&#x2F;MQTT(S)&#x2F;TCP&#x2F;UDP等多種通訊協定</li><li>輸入電壓範圍：2.1 ~ 3.6V</li><li>具 Micro SIM 卡插槽</li><li>下載速率 26.15 kbps、上傳速率62.5 kbps</li><li>支援鮑率 Baudrate 範圍：300bps~921600bps（預設為自動）</li><li>支援AT commands (V.25TER, 3GPP TS 27.007, and SIMCOM AT Commands)</li></ul><h2 id="AM7020-模組"><a href="#AM7020-模組" class="headerlink" title="AM7020 模組"></a>AM7020 模組</h2><p><img src="/img/post/1101219_2157_a.JPG" alt="1101219_2157_a"></p><h3 id="購買網址"><a href="#購買網址" class="headerlink" title="購買網址"></a>購買網址</h3><p><a href="https://www.icshop.com.tw/product-page.php?28187">https://www.icshop.com.tw/product-page.php?28187</a></p><h3 id="模組介紹"><a href="#模組介紹" class="headerlink" title="模組介紹"></a>模組介紹</h3><blockquote><p>節錄自 <a href="https://www.icshop.com.tw/product-page.php?28187">icshop</a></p></blockquote><ul><li>PCB 尺寸大小僅 42x25 mm （PCB 折斷後），容易整合到既有專案</li><li>腳位及大小支援Arduino MKR系列產品</li><li>支援 Grove (UART) 防呆插槽，便於連接 Grove 開發板或擴充板</li><li>支援 5-24V寬電壓範圍輸入</li><li>含2顆LED指示燈，可監控電源及網路接連狀態</li></ul><h3 id="UART連接方式"><a href="#UART連接方式" class="headerlink" title="UART連接方式"></a>UART連接方式</h3><center>    <img alt="1101219_2157_c" src="/img/post/1101219_2157_c.png" /></center><ol><li>TX-RX反接</li><li>需要接上介於5V-24V之間的電力，小於5V則不可作動</li></ol><h3 id="基本常用AT指令"><a href="#基本常用AT指令" class="headerlink" title="基本常用AT指令"></a>基本常用AT指令</h3><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><ul><li><code>AT</code><ul><li>測試模組回應</li></ul></li><li><code>AT+CSQ</code><ul><li>查詢網路品質</li></ul></li><li><code>AT+CGMR</code><ul><li>查詢韌體版本</li></ul></li><li><code>AT+CGREG</code><ul><li>查詢網路註冊結果</li></ul></li><li><code>AT+CGATT</code><ul><li>查詢網路是否啟用</li></ul></li><li><code>AT+COPS</code><ul><li>查詢網路資訊</li></ul></li><li><code>AT+CGCONTRDP</code><ul><li>查詢網路狀態</li></ul></li></ul><h4 id="連線與傳輸指令"><a href="#連線與傳輸指令" class="headerlink" title="連線與傳輸指令"></a>連線與傳輸指令</h4><ul><li><code>AT+CSOC=1,1,1</code><ul><li>建立TCP連線</li></ul></li><li><code>AT+CSOC=1,2,1</code><ul><li>建立UDP連線</li></ul></li><li><code>AT+CSOCON=&lt;Socker號碼&gt;,&lt;端口號碼&gt;,&quot;&lt;IP位置&gt;&quot;</code><ul><li>利用IPV4連線到伺服器</li></ul></li><li><code>AT+CSOSEND=&lt;Socker號碼&gt;,&lt;字串長度&gt;,&quot;1234&quot;</code><ul><li>傳送文字訊息</li></ul></li><li><code>AT+CSOSEND=&lt;Socker號碼&gt;,08,79FF0D0A</code><ul><li>傳送HEX訊息<ul><li>(08: HEX -&gt; ASCII字串長度)</li><li>(79FF0D0A: HEX -&gt; ASCII明碼字串)</li></ul></li></ul></li><li><code>AT+CSOCL=0</code><ul><li>關閉連線</li></ul></li></ul><h2 id="預付卡"><a href="#預付卡" class="headerlink" title="預付卡"></a>預付卡</h2><p><img src="/img/post/1101219_2157_b.jpg" alt="1101219_2157_b"></p><h3 id="購買網址-1"><a href="#購買網址-1" class="headerlink" title="購買網址"></a>購買網址</h3><p><a href="https://www.icshop.com.tw/product-page.php?28513">https://www.icshop.com.tw/product-page.php?28513</a></p><h3 id="預付卡介紹"><a href="#預付卡介紹" class="headerlink" title="預付卡介紹"></a>預付卡介紹</h3><blockquote><p>節錄自 <a href="https://www.icshop.com.tw/product-page.php?28187">icshop</a></p></blockquote><ul><li>由遠傳電信提供定量制 NBIoT 服務</li><li>方案為 IoT 定量制 100 型(30MB)，APN：iot4ga2</li><li>提供30MB國內上網傳輸量，若使用超過內含數據傳輸量則自動切斷數據連線</li><li>開通及每次完成儲值設定日起六個月有效，儲值卡片使用上限額度30MB國內上網傳輸量，不提供額外加值服務</li></ul><h3 id="儲值？"><a href="#儲值？" class="headerlink" title="儲值？"></a>儲值？</h3><p>下午有打給遠傳電信的客服詢問，但對方的回應是需要跟icshop購買儲值包，好像不是遠傳電信負責的…<br>之後再打電話去問看看好了…</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.icshop.com.tw/product-page.php?28187">AM7020 - IC Shop</a></li><li><a href="https://www.icshop.com.tw/product-page.php?28187">遠傳NBIoT SIM卡 - IC Shop</a></li><li><a href="https://www.simcom.com/product/SIM7020X.html">SIM7020X Product Infomation - Simcom</a></li><li><a href="https://www.waveshare.com/wiki/SIM7020E_NB-IoT_HAT">SIM7020E NB-IoT HAT - Waveshare Wiki</a></li><li><a href="https://zhuanlan.zhihu.com/p/99336472">快速入门AT指令集 - 知乎专栏</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>硬體</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NBIOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSP430 之 無線三用電表 開發筆記2</title>
    <link href="/2021/12/05/msp430-multimeter-2/"/>
    <url>/2021/12/05/msp430-multimeter-2/</url>
    
    <content type="html"><![CDATA[<h2 id="使用元件"><a href="#使用元件" class="headerlink" title="使用元件"></a>使用元件</h2><ul><li>MSP430G2ET Launchpad</li><li>HC12 433MHz 無線模組</li></ul><h2 id="已完成目標"><a href="#已完成目標" class="headerlink" title="已完成目標"></a>已完成目標</h2><h3 id="量測電阻"><a href="#量測電阻" class="headerlink" title="量測電阻"></a>量測電阻</h3><p><img src="/img/post/1101205_2133_a.png" alt="1101205_2133_a.png"></p><p>為了量測到電阻，這裡運用到兩個知識點：</p><ol><li>V&#x3D;IR（對，就是V&#x3D;IR）</li><li>分壓電路<br><br><img src="https://www.digikey.tw/-/media/Images/Marketing/Resources/Calculator/voltage-divider-diagram.png?la=zh-TW&ts=b09e2b18-5427-4352-aaf2-6be5deefe4f5" alt="分壓電路"></li></ol><p>假設待測電阻是R2，運用分壓電路的公式如下（來源參考自<a href="https://www.basemu.com/make-arduino-ohm-meter.html">這裡</a>）：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">-</span> A: Vt = I x (R1 + R2)（這是大家都知道的<br><br><span class="hljs-bullet">-</span> B: V2 = I x R2（R2的電壓<br><br><span class="hljs-bullet">-</span> 把A換了一下位置: I = Vt / (R1 + R2)<br><br><span class="hljs-bullet">-</span> 把B換了一下位置: I = V2 / R2<br><br><span class="hljs-bullet">-</span> 把A跟B組起來: V2 / R2 = Vt / (R1 + R2)<br><br><span class="hljs-bullet">-</span> 再換一下位置: Vt = (V2 <span class="hljs-emphasis">* R2) / (R1 + R2)</span><br><span class="hljs-emphasis">    - 這就是我們要的公式 </span><br></code></pre></td></tr></table></figure><p>程式碼：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ConvertResi</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> val)</span><br>&#123;<br>    bufferB = (val * (<span class="hljs-number">3.3</span> / <span class="hljs-number">1023</span>)) * <span class="hljs-number">1000</span>;   <span class="hljs-comment">// Volt To micro Volt</span><br><br>    bufferA = <span class="hljs-number">3300</span> - bufferB;                <span class="hljs-comment">// 先求出V1</span><br><br>    resi = (bufferA * Resi_scale) / bufferB; <span class="hljs-comment">// 再套入公式求出待測電阻</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="隨手小記"><a href="#隨手小記" class="headerlink" title="隨手小記"></a>隨手小記</h2><ul><li>實做算式的時候，發現到NodeRED出來的數據不是很正確，只有個位數到十位數的值出來。</li><li>利用Debug查看值的變化，發現到430的變數只有「一個」在暫存器內。其他兩個反而消失掉。<ul><li>是什麼原因…我也不知道XDD</li></ul></li><li>後來移到全域變數，直接配置到RAM內，就解決了這個問題，順便把上一個量測電壓的幾個區域變數變成全域變數。<br><img src="/img/post/1101205_2133_b.png" alt="1101205_2133_b.png"></li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.ti.com/lit/ds/symlink/msp430g2553.pdf">MSP430G2x53, MSP430G2x13 Mixed Signal Microcontroller datasheet</a></li><li><a href="https://www.ti.com/lit/ug/slau144j/slau144j.pdf">MSP430x2xx Family User’s Guide</a> </li><li><a href="https://www.basemu.com/make-arduino-ohm-meter.html">制作Arduino欧姆表测量电阻值</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DIY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>msp430</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LabView植物大戰殭屍 開發紀錄</title>
    <link href="/2021/11/07/labview-midterm/"/>
    <url>/2021/11/07/labview-midterm/</url>
    
    <content type="html"><![CDATA[<p>用LabView做了一個植物大戰殭屍，當作是這門課期中報告。<br><img src="/img/post/1101107_1330_a.png" alt="1101107_1330_a"></p><h2 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h2><p>不要讓殭屍碰到堡壘(滑桿最左邊)，否則堡壘的生命值會扣點，當生命值等於0，遊戲結束。<br><img src="/img/post/1101107_1330_e.png" alt="1101107_1330_e"></p><p>按下放置植物的按紐，植物會射出一個子彈，當子彈碰到殭屍，分數會多得1分。但相對的，殭屍的速度會變快。</p><h2 id="主程式"><a href="#主程式" class="headerlink" title="主程式"></a>主程式</h2><p><img src="/img/post/1101107_1330_b.png" alt="1101107_1330_b"></p><p>大量用到一堆While Loop還有Delay，特別是在殭屍的移動上面，會隨著等級的增加而讓殭屍的移動速度越快。</p><p><img src="/img/post/1101107_1330_c.png" alt="1101107_1330_c"></p><p>雖然是固定將滑桿數值增加0.5，但Delay是透過亂數產生，因此可以產生移動速度不一致的成果。</p><blockquote><p>OS：忘了Event 怎麼用了…</p></blockquote><h2 id="副程式"><a href="#副程式" class="headerlink" title="副程式"></a>副程式</h2><h3 id="Level-Up"><a href="#Level-Up" class="headerlink" title="Level Up"></a>Level Up</h3><p><img src="/img/post/1101107_1330_d.png" alt="1101107_1330_d"></p><p>在這裡會將殭屍做「升級」的動作：將殭屍的Delay變數減1。為了方便擴充所以用Array處理。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.i-gamer.net/site/3242.html">植物大戰殭屍 - 遊戲天堂</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>學校</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LabView</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSP430 之 無線三用電表 開發筆記1</title>
    <link href="/2021/10/31/msp430-multimeter-1/"/>
    <url>/2021/10/31/msp430-multimeter-1/</url>
    
    <content type="html"><![CDATA[<h2 id="使用元件"><a href="#使用元件" class="headerlink" title="使用元件"></a>使用元件</h2><ul><li>MSP430G2ET Launchpad</li><li>HC12 433MHz 無線模組</li></ul><h2 id="已完成目標"><a href="#已完成目標" class="headerlink" title="已完成目標"></a>已完成目標</h2><h3 id="量測電壓"><a href="#量測電壓" class="headerlink" title="量測電壓"></a>量測電壓</h3><ul><li>使用MSP430的ADC10單元，並開啟Repeat Signal Channel Mode（多次量取單通道模式）量測，減少CPU的負擔。</li><li>目前量程為0~16.5V，單位可精準到mV等級，誤差嘛…不用說了。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ADC Unit Initialize</span><br>ADC10CTL0 = ADC10SHT_3 | MSC | ADC10ON;     <span class="hljs-comment">// Sample And Hold Time = 64 x ADC10CLKs</span><br>                                            <span class="hljs-comment">// Multi Sampling and Conversion</span><br>ADC10CTL1 = CONSEQ_2;                       <span class="hljs-comment">// Repeat Single Channel</span><br>ADC10DTC1 = ADC_SAMPLE_TIMES;               <span class="hljs-comment">// ADC Sample Time</span><br><br>ADC10SA = &amp;ADC_Value[<span class="hljs-number">0</span>];                    <span class="hljs-comment">// Start Address = ADC_Value[0]</span><br><br><span class="hljs-comment">// Convert Analog To Digital</span><br>ADC10CTL0 |= ENC | ADC10SC;             <span class="hljs-comment">// Sampling and Conversion Start</span><br><span class="hljs-keyword">while</span>(!(ADC10CTL0 &amp; ADC10IFG));<br>ADC10CTL0 &amp;= ~(ENC | ADC10SC);          <span class="hljs-comment">// Sampling and Conversion Stop</span><br></code></pre></td></tr></table></figure><h3 id="前端顯示"><a href="#前端顯示" class="headerlink" title="前端顯示"></a>前端顯示</h3><ul><li>使用NodeRED解碼，並顯示數值。<br><img src="/img/post/1101031_1937_d.png" alt="1101031_1937_d"></li><li>雖然背後顯示的Node都拉得差不多了。但目前只有電壓，及電壓的歷史紀錄有作用而已，<del>剩下的都是狗屎</del>。<br><img src="/img/post/1101031_1937_c.png" alt="1101031_1937_c"></li></ul><h2 id="開發照片"><a href="#開發照片" class="headerlink" title="開發照片"></a>開發照片</h2><p><img src="/img/post/1101031_1937_b.jpg" alt="1101031_1937_b"></p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.ti.com/lit/ds/symlink/msp430g2553.pdf">MSP430G2x53, MSP430G2x13 Mixed Signal Microcontroller datasheet</a>]</li><li><a href="https://www.ti.com/lit/ug/slau144j/slau144j.pdf">MSP430x2xx Family User’s Guide</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>DIY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>msp430</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
