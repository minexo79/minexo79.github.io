[{"title":"來講講我的大學專題","date":"2023-01-18T16:30:00.000Z","url":"/2023/01/19/university-seminar/","tags":[["NB IoT","/tags/NB-IoT/"],["Labview","/tags/Labview/"]],"categories":[["硬體","/categories/%E7%A1%AC%E9%AB%94/"]],"content":" 以下內容節錄自專題成果報告書，絕對不是因為我懶所以才這樣做的。 專題名稱：應用物聯網技術於水質監測與預警系統開發組員：我 &amp; 其他五位很照的同學們 摘要文蛤是臺灣西海岸高經濟漁產之一，年產值高達上億元。彰化縣芳苑鄉漢寶村就占彰化縣文蛤養殖面積的1&#x2F;4，素有文蛤之鄉的美名。近年來因氣候變遷加上環境污染，導致育成率不佳、死亡率逐年攀升，養殖戶損失嚴重。團隊自2021年開始，與彰化養殖協會合作，就水污染問題，嘗試監測當地水質著手，運用專長，解決問題。我們嘗試製作一套可量測酸鹼值，導電度與水溫的水質監測器（簡稱水盒子）、並整合與後端伺服器與LINE Notify的監測與預警系統， 應用省電與NB IoT的低功耗廣域物聯網傳輸技術，並且開發校正APP，將感測數值整合至水盒子，除了方便安裝與維護外，也將水盒子的軟、硬體模組化，做為未來商業開發的基礎。水盒子多次在漢寶養殖現場進行實測，分別安裝在臨海堤防、大排、養殖池外排水圳等位置，檢視訊號傳輸、感測器功能和預警系統功能、後台數值接收和運算以及數值分析，從發現錯誤中學習並修正、改善軟硬體功能，包括水盒子滲水、浮力架設計、NB IoT通訊品質與感測器方面的問題。透過專題，團隊從做中學，除了深化資工專業的學習與應用外，還有養殖業師帶領我們的跨域學習，對產業智慧科技化打下基礎。未來除了改善、優化水盒子的軟、硬體外，也會根據當地養殖戶的需求，製作適合當地的水質監測與預警系統，從而讓系統更能穩定運作且達到長久監測的目標。 研究背景本團隊的研究地點於彰化縣芳苑鄉漢寶村，文蛤養殖面積約406公頃，曾經年產值更高達上億元，而被稱為文蛤之鄉之一，是本計畫主要的實驗地點。文蛤是與我們生活密不可缺的國民美食，也是一個很重要的產業鏈。 研究動機近年來由於未經正常程序排水導致水質遭受污染、季節交替溫差太大、季節性的災害（例如颱風過境）出現豪大雨的現象以及沿岸風機時常出現漏油等狀況，導致文蛤致死率攀升，嚴重影響文蛤收成，導致養殖戶的經濟承受極大的損失。 文蛤養殖仰賴海水與淡水混和成半淡鹹水，成長期為13個月至15個月，所需鹽度也隨年齡遞減。水質污染引起水質中的物理，化學或生物狀態改變，而大部分均為人為因素（如：工業廢水、廢棄物投海、船隻污染、風機漏油…等。）造成不同程度的水體破壞，因而間接影響到產業發展，尤其是養殖漁業。特別是在今年10月20號，因為周遭的風機出現漏油，讓彰化沿岸一帶的文蛤、魚、蝦有暴斃的跡象。 臺灣河川短淺，雨季集中，降雨期水流常挾雜大量泥沙沖刷而下，往往造成河川下游氾濫。而枯水期長，污染物易堆積河床，雨季來臨時，隨著溪河匯集至下游，水污染情況因此與日俱增。這十年來經常發生文蛤驟然死亡且有逐漸嚴重的趨勢，導致養殖戶的損失也逐年攀升。 人類食用受污染之文蛤，易對健康造成傷害，市場價格因而大幅下降，幾乎不敷成本。氣候因素也影響魚塭養殖，出現大量暴斃現象，育成率僅有5成左右；以2017年為例，因不明的原因造成文蛤大量死亡，大大影響當年的收成。這兩年的疫情也重創銷售量，造成許多文蛤養殖戶都快撐不下去。若是溫度或是pH過高，會導致水質中的毒物對於文蛤更具威脅性，造成文蛤大量死亡。 本團隊的夥伴於大二上學期到彰化芳苑從事服務學習活動，透過參與在地產業的體驗與導覽解說，得知文蛤養殖近年來遭遇的問題，引起我們想要了解問題並運用專長尋找解決方案。經過數次會議的討論，決定要先從監測水質著手，並打造一整套的監測與預警系統。 專題目的本團隊在去年嘗試利用系上所學之技能，並與張簡琳玲老師合作，實際製作包含前端至後端共一整套之監測與預警系統，後續在經過實際場域安裝與後續維護後，發現本團隊所製作的系統只考慮到監測魚塭內及大排水系統的水質問題，無法監測整體附近海域水質的問題。 且關於監測出來的數值，我們無法整理出一套算法來計算出正確的數值。在資料的傳輸過程、資料的完整度與系統的完善還有很多需加強的部分。同時在感測器保護方面，由於考量不是周全，導致後續回收以及維護方面耗費許多力氣。 對於本團隊在當初所設立的目標：如何在偏遠的地方、還能正常且穩定的傳輸監測數據，還有很多問題要改進。於是在本次專題，決定改進整體架構，並嘗試在多點部署監測裝置，來完善並驗證本次監測與預警系統的可行性。 經過討論，決定在本次專題所研究的目標與規劃如下： 省電：讓裝置可在野外長久運作。 防水：裝置放在大排，可經得起潮汐變化。 傳輸：即使放在野外，也能持久且穩定的傳輸監測數據。 耐用：如何讓裝置不易損壞？ 及時反應：能在短時間內發現異常並傳輸預警訊息。 操作簡單：能讓當地養殖戶方便校正，減少派遣人力的資源。 專題架構 成果照片 實驗過程與探討頭重腳輕，導致翻覆執行這次的專題的時候，與指導老師討論過程中，決定了要部署多台的水盒子的想法：由於要由源頭開始到末端都需要有監測裝置，才可知道水質的變化。只有一台裝置會是不夠的。經過場勘，這一次的場域將水盒子放置在大排的中央，所以必須要有浮力架支撐水盒子，不讓水盒子泡在水內。 與成員討論時，實際製作過一個模板，並且經過實測，發現到吃水的情況嚴重，有可能會讓水盒子泡到水。之後把原本的大水管改成保麗龍，才解決這一個問題。同時在製作過程中，也想到成本的問題，團隊內有人建議可以直接用保麗龍板製作，不需要再使用水管。且純保麗龍組成的浮力架的重量，相比水管會減少許多。 於10月26號安裝時，剛好感受到當地的大風，在安裝時也發現到團隊設計的浮力架會有因大風及兩邊不平衡會導致翻覆的問題，但由於當初製作時並未讓水盒子達到平衡，於隔天收到了當地養殖戶通知水盒子翻覆的訊息，經過團隊緊急討論，或許有可能因為兩邊不平衡的關係，導致一邊保麗龍板上會有積水的現象。以及浮力架是在左右用繩子固定，再加上大風的侵擾，讓水盒子在隔天觀察時發現翻覆的現象。 隔天討論為甚麼會翻覆的時候，發現到「頭重腳輕」的問題，也討論出幾種作法：包括把水管的架子放到底下，增加重量。又或者是綁上重物，改變繩子固定的位置…等。同時也發現到水盒子的防水措施因考慮不周全，防水措施做得不夠，導致PCB滲水嚴重。 後續針對這些問題，重新設計一個新的浮力架，我們參考當地養殖戶放在魚塭的膠筏，做了一個給水盒子乘載的「膠筏」：使用PVC水管製作，並在上方使用角鋼與填縫劑固定。製作好後於組長家附近小排水溝進行測試，確認沒有水跑進膠筏內。在做好膠筏之後，重新安裝至彰化漢寶當地進行量測，截至報告完成為止沒有發生翻覆的情況。 監測數據出錯於水盒子連同第二版浮力架安裝完成的時候，於隔天發現到感測器出現數值異常，甚至無法接收數據。經過討論，可能的原因為當地大排水中的生物附著於感測器外的濾網，亦或者是感測器損壞，導致無法正常讀取數值。相關的問題可能要等到回收之後才能確切知道原因。 資料傳輸由於前端的水盒子採用NBIoT低功耗廣域網路技術，相較於前一代可以不使用中繼裝置即可傳輸資料，但是在傳輸上因為協定的關係，有時資料會無法正常回傳，需要很久的時間之後才可將資料回傳，同時發現NBIoT模組與基地台通訊時的CSQ（訊號強度）過於低下，不是很正常的傳輸。 經過實驗，發現伺服器端與水盒子的傳輸上出了問題：在伺服器的等待時間設置過久會造成資料無法即時傳回，讓水盒子斷線。經過調整，雖可暫時解決這個問題，但是還會有資料無法回傳的問題，還不是最有效的方法。 其他神奇的功能另外，在開發預警系統的時候，指導老師提出了意見：除了預警之外，可以加入更多的功能，比如要不要在一段時間內只發送幾則預警通知，避免嚴重打擾作息？又或者考慮到養殖戶的年齡，需要再加入語音播報的功能，讓養殖戶能更方便知道養殖池&#x2F;大排內的狀況？ 這些想法有些已經完成，但有些還在試驗當中，尤其是語音播報：目前聊天軟體提供的API並未有這項功能，如果使用手機內系統轉語音的功能，那會讓整支手機的所有訊息都會用語音的方式播報，如何解決這個問題，是本團隊需要挑戰的一個目標。 結論到目前我們的系統已經大致上成型，包括位於前端的水盒子與後端的接收與預警伺服器系統。但實際安裝後，確認到有些許問題上需要修復：包含前端的裝置有存在一部分的缺失：包括在傳輸數據時，會出現丟包的情況，無法傳輸一段時間內完整封包；以及在感測器上面沒有做好保護，導致後期量測數值完全錯誤；於後端的LINE預警程式有完成初步架構，但測試時有發現到訊息無法發送完整，還需加強並修改些許邏輯才可上線運作。 未來展望上述的問題有些已經解決，但有些尚須要等水盒子回收之後才可知悉，本次專題我們從中吸取到很多技術及寶貴的經驗，包含當地的養殖戶跟我們分享的養殖經驗和師長在我們製作時補充的事項，往後我們會將這些經驗帶到未來的職場上運用，透過這次的經驗，期許未來的自己能夠更加精進。 特別致謝 弘光科技大學 張簡琳玲 教授 童建樺 教授 魏榮君 教授 環安系 俞廷軒&amp;施佩珊 同學 彰化養殖協會 許永坤 副總幹事 參考資料 蔡佳珊. (2007). 文蛤危機！氣候異常，底土污染，雲林文蛤死亡率四成，台南也成災. 上下游 News&amp;Market. 劉富光&amp;何雲達&amp;郭仁杰&amp;廖一久. (2001). 優質文蛤的養殖技術. 行政院農業委員會. 林宛諭. (2021).風機漏油芳苑魚塭遭殃漁民氣炸，環保局開罰了. UDN聯合新聞網. 吳建輝. (2022).彰化芳苑發電風機漏油，周邊文蛤、蝦污染暴斃.中國時報. 許紋華. (2002).食物與環境因子對文蛤攝食的影響.臺灣博碩士論文知識加值系統. 行政院水試所.(2011).請問文蛤養殖的最適生存條件，氨氮、溶氧、pH值是否對養殖有相關性？若有其相關性為何？.行政院水試所. 劉紹淵.(年份未知). LASS水盒子. ICShop 王以仁.(年份未知). 漁業、水污然與環境保護. 高雄市漁業管理處 行政院農業委員會漁業署. (2020). 民國110年漁業統計年報. 行政院農業委員會漁業署. 蔡欣祐, 游傑宇, 張友瀚, 傅智城, 趙才萱, 柯景承, 俞廷軒&amp;施佩珊. (2022). 基於物聯網之水質監測與預警系統 多元專題計畫 期中報告. 弘光科技大學. Derk, B. C., David, H., Leslie , S. N., &amp; Shirley, B. M. (2008). Continuous Water Quality Monitoring for the Hard Clam Industry in Florida, USA. Environ Monit Assess, 148(1–4), 409–19. Chen, K., Chou, Y.- han, Angelo huang, Y., &amp; Huang, D. (2020). Effects of Different Shading Rates on the Growth and Water Quality of Hard Clam (Meretrix Lusoria) Aquaculture. Environ Monit Assess, 47(2), 87–94. "},{"title":"2023 新年快樂","date":"2022-12-31T00:51:24.000Z","url":"/2022/12/31/2023newyear/","categories":[[" ",""]],"content":"新年快樂!!"},{"title":"分享最近的兩個活動","date":"2022-10-16T15:00:35.000Z","url":"/2022/10/16/month-update-1016/","tags":[["活動","/tags/%E6%B4%BB%E5%8B%95/"]],"categories":[["個人","/categories/%E5%80%8B%E4%BA%BA/"]],"content":"前言這幾個月因為開學，然後中標，導致專題壓力增加，之前的CatFramework也先暫停維護，所以很難想到要寫甚麼www但倒是可以分享一下最近幫忙直播的兩個活動，其中一個是我之前介紹過的東西。 透過 Google 打造自研晶片 專案網址 這是Google最近剛出的一個計劃，與 SkyWater Technology 晶圓廠和 Efabless 合作，提供完全開放原始碼的製程設計套件 (PDK) 和相關工具，讓任何開發人員都能設計出可製造的晶片。每兩個月，你都能將自己的開放原始碼設計提交至 Open MPW Shuttle 計畫。如果設計入選，製造成品就不必付費。而我在的社群邀請到南臺科技大學電子工程系的李博明老師，來分享關於如何製造自己的晶片，以及用自身的角度來看這個計劃是否適合新手入門： 因為這場在協助直播的時候發生些技術性問題，因此沒有很專注聽重點。也導致直播畫面有中斷的現象。之後社群其他成員也邀請到Efabless的CTO來分享與介紹這個計畫，影片如下： CFU：打造自己的AI加速器 專案網址 關於CFU的簡單介紹可以看這一篇：半年更新因為上次的自造晶片，讓我想到之前講師來校園分享的這個專案，因此我邀請了Akio老師來到伴伴學分享這個框架，以及框架可以做的應用。 簡單統整一下當天的重點： 底層是使用LiteX與Amaranth(前身為nMigen)，因此能用Python去實現你想要的單元到FPGA內部。 想要增加上面沒有的板子，可以複製現有的設定檔做修改，大部分的IC&#x2F;FPGA LiteX皆有支援。 CFU的運作原理是藉由 VexRiscV CPU Core 內部的 CFU單元去做運算，因此省略原有計算的等待延遲。 當前只能使用Shell控制，還需要人補齊其他方式交互操作。 資料來源 Build Custom Silicon with Google - Google CFU-Playground Github 南臺科大瘋狂maker教師李博明：教年輕人就要比他們更像年輕人 - 快樂工作人 "},{"title":"111年8月更新","date":"2022-09-03T12:12:35.000Z","url":"/2022/09/03/month-update-0903/","tags":[["碎碎念","/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"categories":[["個人","/categories/%E5%80%8B%E4%BA%BA/"]],"content":"前言距離上次更新已經過了一個月又多一點了，這段期間除了在處理學校的專題還有研究之外，對於之前開的坑也在這段時間，前進了「一點」。 😿 對，真的是一點… 黑貓框架 這次的更新，包含了下面幾個改進： 程式架構架構方面，採用「模組化」的方式，在最上層的Header引入其他功能的Header檔案，在往後也方便維護。 另外，我通常寫MSP430系列的MCU都是會「直接操作暫存器」，所以常常都會使用到C語言的邏輯運算符號 (And, Or, Xor, Not…等等)。為了簡化並在往後能好理解每個程式碼的運作過程，我將操作暫存器的程式碼使用define形式定義，後續就可以用自己定義的define來撰寫程式。 模組撰寫對於每個模組，我參考了Arduino Core和其他幾個HAL函式庫的寫法，在Header檔案先定義好需要用到的暫存器陣列，以及會給使用者做的函式。這裡我用到了extern保留字，它的作用是讓編譯器就自動去尋找其他程式嗎是否有該函式&#x2F;變數，並且連結起來。讓我能在後續維護中，只需更改其他檔案中，有一樣名稱的函式&#x2F;暫存器陣列，而不必整個檔案都需要動到。 UART目前僅實現了下面的功能： 初始化設定 字元&#x2F;字串非中斷方式傳輸 其中傳輸的部分，我先寫好UART傳輸一個字元的函式Uart_Write，在之後擴充的時候，就可以事先呼叫寫好的傳輸函式。 結果如下： 其他其他有實現的程式碼就放在這邊介紹： 看門狗 WatchDog_Shutdown()：關閉看門狗計時，防止重新開機。 GPIO GPIO_Init()：初始化所有GPIO腳位的狀態，並且設定32.768K震盪器的腳位模式。 SystemClock SystemClock_Init(MHZ)：設定系統時鐘，並且檢查震盪器用作是否正常。 常用的功能 stoi()：字串轉整數。 sort(array, arraylength)：使用插入排序法，由小到大重新排列。 CC1350 與 Ti RTOS緣起大二的時候，因為教授的推薦，讓我接觸並嘗試轉寫了Ti的SimpleLink無線射頻系列MCU，並且應用在大專院校計畫身上。這系列的MCU大部分都使用Arm Cortex-M的核心(M0、M3、M4F)，有寫Arm的應該不太陌生。但當時我是第一次嘗試這類的開發，所以碰到很多卡關的地方。尤其是在於，Ti官方在Example有分成No-RTOS與Ti-RTOS，所以兩者的範例多寡有很大的不同。 好在Ti官方的Example裡面的程式碼不太難懂，一方面是SDK的功勞，很多功能都可以用HAL方式實現。加上程式碼不難移植，所以減少很多複雜的功夫。就這樣子邊看前人的經驗，邊參照官方的資源文件，很順利的把我的大專計畫結束掉了。講真的，光要啃Example的程式碼，就能知道學這些的程式基礎一定要很夠www。 奉勸各位學弟，大一的程式設計一定要學好。 題外話：自從加入實驗室後，因為太常說到Ti的產品，好幾次都被社群朋友說是Ti推廣大使XD 後續由於我在做大專的時候，由於焊接好的樣品不多，導致留下了很多洗好沒焊接的電路板。就這樣過了一年，到這個暑假，突然某天不知哪來的動力，隨手抓了一把沒焊好還是全新的電路板，還有當初買的一些料。加上從壞掉的板子拆下來的晶片，就髓手焊了3塊可以運作的小系統版。後來我想說，正好之前買了一塊包有藍牙 + Sub GHz私有網路的CC1350開發版，那不如研究一下之前沒研究過的FreeRTOS，並且做點小玩具。 購買到開發板之後，我先去Github翻了一圈，發現到有人放出可以跑FreeRTOS的開源專案。這讓我又激起想讓它動起來的動力了。 就正好興高采烈地去下載好FreeRTOS，並且嘗試要放到Project的時候…悲劇發生了。 我照之前的經驗，翻了官方的Example，看看有沒有關於FreeRTOS的範例可以參考，不出意外的是：「沒有」。而後我去翻了官方的文件，想說文件內有講到如何安裝FreeRTOS，那應該是可以完整被官方支援才對。直到我看到了這段話： Note: FreeRTOS is not supported for the CC13xx or CC26xx device families, since these devices use TI-RTOS in ROM. 看到了這段話之後，這是我當下的心情： 後來想想，可能是因為：這系列的晶片是有包含M3&#x2F;M4F與M0的核心，其中M0已經被Ti官方固化成只能操作RF單元，導致FreeRTOS無法完美相容。，導致CC13xx與CC26xx沒有被官方正式支援FreeRTOS。 那既然不正式支援FreeRTOS，那倒是可以先學Ti官方的RTOS。 在這之前，大專的時候有簡單看過Ti RTOS的Example，但是當時我是使用No RTOS，也就是Bare-Metal的方式做開發，所以並未針對這方面下去研究。於是為了讓自己能快速深入Ti的RTOS到底在幹嘛，我參考了兩份網路資源，並做成筆記供未來複習。而其中一份也順便讓我知道原來SimpleLink系列的MCU可以讓主單元與RF單元進入休眠模式，讓這U可以到如此低的功耗： Ti SimpleLink Academy (筆記大部分的Code都是來自於這份) CC1310 軟體速成 (與其說這是教學，不如說這叫做產品發布會) 就這樣看了這兩個教學，我也拿了之前買的SHT40感測器，接上開發板，嘗試做了一個簡單的Demo，之後做完整一點再來寫一篇好了。 C# MAUI這個暑假，也因為學校的研究關係，學了一個新的跨平台軟體框架 - MAUI。這個框架是由微軟開發的，在此之前微軟有推出過叫做Xamarin的跨平台軟體框架。據微軟前段時間開的發布會兼佈道大會所述：MAUI會成為Xamarin的進化版，與此同時也實現了「一種Code」即在不同的平台上執行的夢想。 抱著這樣的疑慮還有好奇，我跟著看了這位國外Youtuber的4HR教學，一步步地做起了第一個APP。說真的，也只是照著這份教學來去小改一點東西：包括把資料的來源改成自己寫的，還有針對某些部分去做了點UI上的美化。 抱怨一下，原本我在看4HR的教學的時候，影片上示範的Code是這樣： 但當我在我的電腦運行的時候，我發現Compiler不知道什麼是ICommand，導致一直出錯。找過相關資料後，才發現到是我的MVVM Toolkit是比較新的版本，所以一些Genreator的名字有被改掉得情況，比如下面的Code： 所以我說，微軟你到底在衝三小。 RISV伴學松暑假快完了，這個活動也快結束了。 坦白說，經過這次的活動，比其學到什麼是CPU，怎麼做CPU之外，比較重要的是如何一起陪伴，一起學習，還有如何享受這個過程。過程中，我發現到有些人會開著遊戲邊參加活動，想說這樣就算了，比較誇張的是有人連需要使用的軟體都沒有安裝。原本想著怎麼讓他們能更有參與感，就這樣到了8月底，在某次跟其他學友聊天的時候有談到這件事。他們安慰我，但也跟我說了一句話： 你要做的不應該是這些，你要享受的是活動的過程，再這樣只會搞得更累。 坦白說我還是不懂這句話的含意，雖然挑戰者一次比一次少，還發生了上述的狀況，讓我漸漸不去專注於原本想學的東西。後來想著，其實我該做的事情已經做到了，就是找一群對這主題有興趣的人共同學習。也許我作為組織者，該做的應該就是這些，剩下的就給他們各自飛，才是對的做法。 題外話：對RISCV有興趣的可以參照這一份共筆開始從頭學起，希望可以幫到想學得人。 實習這個暑假過後，我就不再是大三，而是該要面對殘酷社會的大四。關於實習，我前後找了5~6間公司，好幾間都是回我只收正職。其中一間願意讓我過去與他們面談。但面談時我出了差錯，以及太過於緊張，導致主管的問題我很多都是回答錯誤的。就這樣子失去了這個機會。 之後我也在嘗試尋找公司，但時間就這樣過去，來到了我之前所設好的底線。無奈之下，就轉回學校有簽約的公司，大多數都是沒錢的，雖然失望但也只能挑這些了。因為我的習慣會先去問，所以就這樣問了其中一間公司，還有沒有實習的機會。而也就是這個機會，讓我要在下半年，開了不同的學習主線：無刷直流馬達。 一樣的，我去找了幾個教學資源，另外也買了之後會用到的開發板，希望能在實習階段可以快速步上正軌： 亲手教你转起一台无刷电机 - 煲仔滷煮 直流無刷馬達原理與驅動控制 - 張雯翔、張家榮、許凱翔、常文峻 無刷馬達大小事 5分鐘就上手 - 東方馬達 結語這個暑假真的過得滿充實的，其實還有發生一件事情，讓我成長很多，但基於某些原因我不能公布。大概就這樣吧，要開學了，也該收心，準備最後專題的衝刺與迎接未來的準備。 喔對，校長你甚麼時候會出來探探頭。 參考資料 CC1350 data sheet, product information and support - Ti SimpleLink Academy - Ti SimpleLink MCU SDK User’s Guide - Ti CC1310 軟體速成 - 德州儀器 亲手教你转起一台无刷电机 - 煲仔滷煮 直流無刷馬達原理與驅動控制 - 張雯翔、張家榮、許凱翔、常文峻 無刷馬達大小事 5分鐘就上手 - 東方馬達 "},{"title":"半年更新","date":"2022-07-17T02:02:19.000Z","url":"/2022/07/17/halfyear-update/","tags":[["碎碎念","/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"]],"categories":[["個人","/categories/%E5%80%8B%E4%BA%BA/"]],"content":"前言距離上次更新Blog已經過了快半年有，因為現實的原因（打工、課程、專題…等）消失一陣子，導致原本想要達成的每周一個更新的目標也無法實現。多次也想說上來更新一下Blog，寫寫廢文甚麼的，後來也都因為懶癌也沒有上來更新www，剛好暑假到了，趁這個時候來分享一下我遇到什麼事，以及我下一年想要達成的目標，一年後再來驗收看看我到底有沒有做到。 （我就懶，YEAH） 筆電我有個弟弟，剛好今年他要升大學，由於他的理想學校離家很遠，剛好我也對原本的電腦有很多不爽的地方，於是我決定買一台新筆電，原本舊的筆電就整理過後整台過給他。原本的舊電腦令我不爽的地方： 電池容量小（45Wh），沒內顯，所以超級耗電。 研究方向改變，I5 9代不能扛起現在的任務。 筆電轉軸特別鬆，不好好保護很容易斷掉。 當初是特價品，拆開後發現可換元件的用料都是來路不明的廠商。 經過幾周的考慮，以及一年前看到惠普於對岸推出的新光影精靈系列，然後就被這台深深迷上，再於幾天做好功課，找到特價又大碗的型號之後，讓我每晚睡不著覺的光影精靈（台版）就到我手上了。原本要到對岸淘寶&#x2F;京東買下這一台，但後來選擇國內通路有兩個原因： 我喜歡沒注音的鍵盤，無奈對岸通路沒有全球保固。 這一台的配備（R7-5800H &#x2F; RTX3050），加上當時30000出頭的價格，以及後續多送我8G的記憶體。 30000元相比原本18000的筆電，還是30000元的讓我安心。 於是從買來到目前為止，已經快兩個月了，我對它依舊還是很滿意。（除了該死的微軟BUG） 黑貓框架大家有興趣不訪按個星星www 這是我原本要讓自己能更容易開發MSP430，將幾個常用的變數及功能整合起來，變成一個讓自己更方便開發的個人函式庫。但幾年大學生活與研究下來，發現到光有函式庫是不夠的，原因在於： 功能不會只有一種，而是會根據需求做變化。 於是決定開始動手並整理此函式庫，並用我在網路社群活躍的暱稱，取名叫「黑貓框架（CatFramework）」。並且希望我能在一年後能讓這個框架達成下面我列出的功能。並每個月透過Blog更新做了哪些部分。 介紹這個框架讓開發者能類似Arduino方便的功能，不用透過暫存器（Register）設定430的某些單元。比如下面透過暫存器設定UART的程式。 但如果改用此框架，只需輸入一行即可完成設定UART單元。 支援的單元 SystemClock GPIO（僅有Initialize Pin功能） Timer（僅支援TimerAx單元） ADC UART I2C SPI DMA FPGA &amp; AI這算是有個淵源…所以我拆成兩個部分。 AI大三學校某節課，老師請了一位FPGA的講師來分享一個AI加速器的框架。當下看到Python我頓時有些興致，原因在於一開始學的程式，除了C之外就是Python。就這樣到當天，與其說是講課，不如說是來噹我們，甚至有意且強硬的把我拉進去另一個領域，使得我開始對FPFA及AI感到灰心。更是完全都不想碰這些東西。某天我心血來潮（其實是嫌錢太多），買了一個對岸的FPGA開發板 - Tang Nano 9K。正想說怎麼玩的時候，想到當時講師說的那個框架，結果到Github一查發現，該開發板有支援到這個框架。到此時我決定嘗試在這塊開發板上跑看看，於是就把Ubuntu系統安裝回來，也很快地用了一周的時間把所有工具包安裝上去。但要真正跑上去的時候遇到了一堆問題。但好在有網友及社群的人幫忙，總算把框架成功地跑在Tang Nano 9K上。 FPGA原本想說這樣就結束了，而我也把成果整理一下，並到一個社團 - 伴伴學，跟其他成員分享我到底幹了甚麼。在當天分享完畢後，社團內的兩位成員邀請我在當天的晚上聊聊關於我下午分享的內容，也邀請我一起開設暑假的讀書會。其中一位成員，剛好也是瑞昱的員工，也藉這個機會鼓勵我繼續學習關於FPGA及AI的知識。與他們聊完之後，我也對FPFA及AI開始改觀。在當天晚上，我跟另一位成員快速的把活動建立好，也開始對外宣傳。而六月一整個月，我跟十幾位想要參加的成員討論活動如何進行。然後今年（民國111年）的暑假，這個活動就開始了… ZYNQ為了這個活動，剛好這學期有得到令我滿意的成績，所以又立馬砸錢買了一個FPGA開發板。（其實也不多，但是到對岸買可以省500元）買他的原因：這塊上面的SoC(Xilinx ZYNQ)除了FPGA單元以外，裡面還外加了雙核心的ARM處理器，所以可以跑LINUX!!!!而且買這塊也有個想法：從頭學習當初學校教的內容，以及跟著上面的讀書會，看能不能把自己製作的CPU跑在這塊開發板上。 後記這一學期真的是很戲劇化的學期。從已經對AI絕望，到重拾想學習AI，還有抱著學習新技術的決心，找了一群志同道合的網友辦了讀書會…等。這些都是我從沒想過會發生的事情。剛好也要大四了（要出社會了嗚嗚嗚），再半年過後我就要嘗試踏入職場，慢慢踏入甚麼是大人的世界。希望未來還能像這樣子亂噴一通幹話，能繼續學習我沒學過的事物。 欸好啦，VM家的VTuber很香欸，快點去看啦。"},{"title":"奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(三)","date":"2022-03-20T13:10:30.000Z","url":"/2022/03/20/lora-as32-3/","tags":[["LoRa","/tags/LoRa/"]],"categories":[["硬體","/categories/%E7%A1%AC%E9%AB%94/"]],"content":"前言上次的Blog有提到：目前的韌體已經可以正常的收發，唯有不定時會出現發送與接收不一致的異常。判斷可能是Arduino內的接收方式與我們認知的有些不同。這段期間我嘗試了許多作法，比如更改接收的函式，嘗試將接收端的接收間隔延長…等等，但都無助於解決問題。也因為這段時間要忙專題和大專院校的事情，很少時間專注於自己的研究，所以這篇Develop Blog（應該算吧？）才會那麼晚出來。 測試步驟為了解決這一系列的問題，我自己列了一套測試步驟： Arduino + AS32 -&gt; CP2102 + AS32 TX測試 CP2102 + AS32 -&gt; Arduino + AS32 RX測試 Arduino + AS32 &lt;&gt; Arduino + AS32 TRX測試 上面的一跟二是確認這兩顆模組的傳輸方式以及效果如同說明書所述，並且確認兩顆模組運作正常，排除硬體面的問題。AS32模組與CP2102的接法如下：（採用模式0，將MD0與MD1接地，使其保持0） 測試步驟一 Arduino 連接 AS32 當作傳輸端，燒錄傳輸程式 CP2102 連接 AS32 當作接收端，開啟任一Serial Monitor檢視資料接收狀況 測試結果如下： 測試步驟二 CP2102 連接 AS32 當作傳送端，開啟任一Serial Monitor並傳輸封包 Arduino 連接 AS32 當作接收端，燒錄接收程式，開啟另一Serial Monitor檢視資料接收狀況 測試結果如下： 經過交叉的測試，在單一封包，不固定時間發送的情況下，兩顆模組並未有任何掉包的情況產生，所以可以排除硬體面的問題。 測試步驟三 一 Arduino 連接 AS32 當作傳輸端，燒錄傳輸程式 另一 Arduino 連接 AS32 當作接收端，燒錄接收程式，開啟另一Serial Monitor檢視資料接收狀況 測試結果如下：再連續且不中斷傳輸的情況下，反而發生了資料錯位的問題。（就卡在這裡阿阿阿阿阿qwq 解決方法先放出程式碼（關鍵部份） 將其中第四到第六行的判斷改成如下： 運行結果： 好欸，成功了！！！ 原因首先是判斷狀態的部份：（意即原本的第6行） 這行判斷式的意思為：如果PB4腳位輸入為低準位(LOW)，則進入IF判斷式內運行。 註：PB4對應Arduino Mega的腳位是第10腳位，對應Arduino Uno的腳位則是第12腳位。 但這樣寫會有一個問題：這樣真的會是我們原先需要的結果嘛？ 這個寫法可能在Arduino的世界沒太多人見過，這是使用AVR單晶片暫存器的寫法，相較於Arduino Core，除了執行速度有稍微提升以外，可以叫出Arduino Core反而無法實現的功能。（Ex：更多的中斷） 將上面的暫存器內的值變成8位元後來看一下： 看起來什麽問題，但如果PB4是1呢？ 欸不是，怎變成10了？很顯然的，我忘了把數字「往右移」回來，所以他不是真正要的狀態。更改的方式只須在後面新增一段往右位移的程式碼即可： 關於位元移位的操作：可以去Google搜尋：bitwise Operator 位元運算子 但這樣還是無從解決問題。因為關鍵在於：AS32的AUX腳位的邏輯判斷，以及Arduino Core的Serial處理方式！！先來看一下AS32的Datasheet： 當接收到由發送端傳來的訊號時，AUX腳位會先從高準位(HIGH)變成低準位(HIGH)，然後才會開始透過TX腳發送收到的訊號內容給MCU。上面那樣的Code其實是沒什麽問題，但關鍵在於Serial.read()這一段程式碼。它會先檢查一段時間，如果在RX腳位沒收到任何字元，會回傳數字-1給主程式。而我上面的寫法並沒有考慮準位的變化，反而讓Arduino判斷到低準位就開始直接收訊息，因此出現了資料錯位的情況。解決方式如同上面所述，加入上次準位的判斷，這樣子就可以解決問題了。 就算到2000多次，還是一樣可以完美收到封包的內容了呢！ 後記既然問題解決了，那應該也可以規劃實驗傳輸距離的部份了，但在這之前，我還想先知道一個部份：訊號強度（RSSI）。有了RSSI，就可以知道當下訊號狀況是好還是差。如果可以取得這個資料，那在傳輸距離的實驗上會有一大部份的幫助。另外在這裡我也想感謝伴伴學的幾位學友，如果沒有你們幫忙，這個問題也不會解決，我可能會卡的很久，包含這一篇Blog。 開發照片 參考資料 澤耀科技 AS32-D20 無線透傳模組說明書 millis() - Arduino Reference Serial.read() - Arduino Reference "},{"title":"奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(二)","date":"2022-02-04T06:33:45.000Z","url":"/2022/02/04/lora-as32-2/","tags":[["LoRa","/tags/LoRa/"]],"categories":[["硬體","/categories/%E7%A1%AC%E9%AB%94/"]],"content":"前言這段時間把AS32 LoRa模組相關的資料大致上看過一遍，需要注意的地方大概如下： 這一顆LoRa模組在傳輸的操作上需要配合ACK腳位，特別是在「發送端的第一筆資料」和「在接收前的ACK腳位」。在程式撰寫上可以透過IO腳位的外部中斷來配合操作。 在模組內工作模式的切換，要透過IO的腳位設定，才可以切換該模組的工作模式。 模式切換 MD0腳位 MD1腳位 一般工作模式 腳位拉低(Input) 腳位拉低(Input) 模組設定模式 腳位拉高(Output) 腳位拉高(Output) 同時，之前跟幾個群組中得知無線射頻並不是隨隨便便都能用的，最好在購買及使用前先看一下當地的法規規範，以免觸法。以台灣的無線射頻法規，一般使用者可使用的是920～928 MHz這一範圍的頻段。其中海上使用的頻段為926～928 MHz，而其他場域可使用920～925 MHz，要購買類似頻段的模組要注意一下當地的法規標示。 最後使用這顆LoRa模組需要注意一點：這顆模組並未有拿到NCC(國家通訊傳播委員會)的認證，因此在「台灣境內」僅能用於個人實驗，不可拿去實際場域運作！ 測試方式這裡使用兩塊Mega 2560，其中一塊僅連接AS32，並且每秒廣播一筆數據，另一塊連接AS32作為接收端之外，也與PC透過USB連接，並使用Serial Monitor顯示A32收到的數據。 發送端程式碼 接收端程式碼 過程上述程式碼中，都有引入millis()以替代delay()，這麼作的方式是利用Arduino Mega 2560內的Timer 計時，可以讓發送端的發送時間更為準確，也不會讓CPU有卡住的情況，導致發送時間不一致。 目前的韌體已經可以正常的收發，唯有不定時會出現發送與接收不一致的異常。目前判斷可能是Arduino內的接收方式與我們認知的有些不同，未來若要開發AS32的函式庫可以朝以下兩者前進： 更改模組廣播模式 完善韌體校驗機制 開發照片 參考資料 澤耀科技 AS32-D20 產品介紹 澤耀科技 AS32-D20 無線透傳模組說明書 國家通訊傳播委員會 低功率射頻器材技術規範 millis() - Arduino Reference "},{"title":"奇奇怪怪的無線說話之術：對岸的LoRa傳輸模組(一)","date":"2022-01-04T14:22:45.000Z","url":"/2022/01/04/lora-as32-1/","tags":[["LoRa","/tags/LoRa/"]],"categories":[["硬體","/categories/%E7%A1%AC%E9%AB%94/"]],"content":" (111&#x2F;2&#x2F;4 更新)最後使用這顆LoRa模組需要注意一點：這顆模組並未有拿到NCC(國家通訊傳播委員會)的認證，因此在「台灣境內」僅能用於個人實驗，不可拿去實際場域運作！ 前言實驗室既有的LoRa模組在操作的時候，因模組內自身韌體的操作方式，造成傳輸時間需要一秒以上，對於省電的應用不是很友善。因此我開始到對岸的網路中，找到了幾家看似不錯的模組，而最近終將一款模組透過各種方法(?搞到我的手上了。 澤耀科技 AS32-D20 我買的規格是北美頻段(915MHz)，發送功率為100mW，根據官方的數據，最遠可以傳至直線距離5公里遠。依照官方給的說明，該模組的北美頻段是在900MHz~931MHz這個頻段區間，可以透過切換頻道的方式更改頻率以及發送功率。 規格 以下資訊均來自該模組說明書，本人僅會列出重要的部分。 支持3.6V~5.5V的供給電壓，電壓過小會影響到實際輸出功率。 理論值(100mW)最遠傳輸距離為5000公尺。 有四種工作模式，可利用MD0跟MD1兩隻GPIO控制。 我購買的是915MHz(北美頻段規格)，可發送頻段範圍為900~931MHz。 頻率切換方式為：(每一個頻道號碼 * 1MHz) + 900MHz。 頻道號碼為15，則頻率為：(1 * 15) + 900 = 915MHz。 發送功率為11~20dbm，有四段強度可調(0~3)。 每一段訊號強度均增加3dbm。 使用UART方式傳輸封包。 開箱不說這外盒真的有點大，還以為是要裝什麼貴重的儀器XDD 通常購買無線模組，都是以一組(2顆)為單位去購買的。跟剛剛的盒子比較起來，這差別蠻大的…（感覺有點浪費包裝Orz） 簡單測試以下測試均照原廠設定。（強度為3，頻段為915MHz，模組透過設定為一般模式，發送模式為透明廣播） 消耗電流先測試模組的電力消耗情況，上電時的電流為9mA。瞬間傳輸時的電流為140mA左右。 延遲上次的模組因為封包準備與發出時間過久，導致操作起來不是很順暢。當天測試的封包大小沒有詳細計算，但用示波器測量ACK腳位（確認模組是否在忙碌狀態）可以發現延遲不是很高，落在170ms左右。 後記這款模組在簡單測試下比之前實驗室的LoRa模組有相對良好的表現，並且操作方面也相對的簡易許多，甚至可以自己造協定。這讓我想起之前購買的HC12模組（頻率為433MHz），某方面來說這顆模組的功能與效果與AS32差不多。但是功耗的部份，我個人覺得有點高，得需要做過一些調整才可以上場。（比如調低發送強度，更換比較強力的穩壓IC…等） 參考資料 澤耀科技 AS32-D20 產品介紹 澤耀科技 AS32-D20 無線透傳模組說明書 "},{"title":"SIM7020E 開箱","date":"2021-12-19T13:48:15.000Z","url":"/2021/12/19/sim7020e/","tags":[["NB IoT","/tags/NB-IoT/"]],"categories":[["硬體","/categories/%E7%A1%AC%E9%AB%94/"]],"content":"前情提要因為現實研究的關係，需要用到NBIoT的網路服務。原本有考慮中華電信的預付卡，但台灣的NBIoT電信服務皆須企業才可以提出申請，只有遠傳電信可以提供給個人使用。感謝伴伴學DC的laoming與elton陪我在今天的下午一起研究。 SIM7020E 簡介 節錄自 icshop 與 SIMCOM官網 頻段支援B1&#x2F;B3&#x2F;B5&#x2F;B8&#x2F;B20&#x2F;B28，適用於台灣三大電信 支援HTTP(S)&#x2F;MQTT(S)&#x2F;TCP&#x2F;UDP等多種通訊協定 輸入電壓範圍：2.1 ~ 3.6V 具 Micro SIM 卡插槽 下載速率 26.15 kbps、上傳速率62.5 kbps 支援鮑率 Baudrate 範圍：300bps~921600bps（預設為自動） 支援AT commands (V.25TER, 3GPP TS 27.007, and SIMCOM AT Commands) AM7020 模組 購買網址 模組介紹 節錄自 icshop PCB 尺寸大小僅 42x25 mm （PCB 折斷後），容易整合到既有專案 腳位及大小支援Arduino MKR系列產品 支援 Grove (UART) 防呆插槽，便於連接 Grove 開發板或擴充板 支援 5-24V寬電壓範圍輸入 含2顆LED指示燈，可監控電源及網路接連狀態 UART連接方式 TX-RX反接 需要接上介於5V-24V之間的電力，小於5V則不可作動 基本常用AT指令基本指令 AT 測試模組回應 AT+CSQ 查詢網路品質 AT+CGMR 查詢韌體版本 AT+CGREG 查詢網路註冊結果 AT+CGATT 查詢網路是否啟用 AT+COPS 查詢網路資訊 AT+CGCONTRDP 查詢網路狀態 連線與傳輸指令 AT+CSOC=1,1,1 建立TCP連線 AT+CSOC=1,2,1 建立UDP連線 AT+CSOCON=&lt;Socker號碼&gt;,&lt;端口號碼&gt;,&quot;&lt;IP位置&gt;&quot; 利用IPV4連線到伺服器 AT+CSOSEND=&lt;Socker號碼&gt;,&lt;字串長度&gt;,&quot;1234&quot; 傳送文字訊息 AT+CSOSEND=&lt;Socker號碼&gt;,08,79FF0D0A 傳送HEX訊息 (08: HEX -&gt; ASCII字串長度) (79FF0D0A: HEX -&gt; ASCII明碼字串) AT+CSOCL=0 關閉連線 預付卡 購買網址 預付卡介紹 節錄自 icshop 由遠傳電信提供定量制 NBIoT 服務 方案為 IoT 定量制 100 型(30MB)，APN：iot4ga2 提供30MB國內上網傳輸量，若使用超過內含數據傳輸量則自動切斷數據連線 開通及每次完成儲值設定日起六個月有效，儲值卡片使用上限額度30MB國內上網傳輸量，不提供額外加值服務 儲值？下午有打給遠傳電信的客服詢問，但對方的回應是需要跟icshop購買儲值包，好像不是遠傳電信負責的…之後再打電話去問看看好了… 參考資料 AM7020 - IC Shop 遠傳NBIoT SIM卡 - IC Shop SIM7020X Product Infomation - Simcom SIM7020E NB-IoT HAT - Waveshare Wiki 快速入门AT指令集 - 知乎专栏 "},{"title":"MSP430 之 無線三用電表 開發筆記2","date":"2021-12-05T08:58:01.000Z","url":"/2021/12/05/msp430-multimeter-2/","tags":[["msp430","/tags/msp430/"]],"categories":[["DIY","/categories/DIY/"]],"content":"使用元件 MSP430G2ET Launchpad HC12 433MHz 無線模組 已完成目標量測電阻 為了量測到電阻，這裡運用到兩個知識點： V&#x3D;IR（對，就是V&#x3D;IR） 分壓電路 假設待測電阻是R2，運用分壓電路的公式如下（來源參考自這裡）： 程式碼： 隨手小記 實做算式的時候，發現到NodeRED出來的數據不是很正確，只有個位數到十位數的值出來。 利用Debug查看值的變化，發現到430的變數只有「一個」在暫存器內。其他兩個反而消失掉。 是什麼原因…我也不知道XDD 後來移到全域變數，直接配置到RAM內，就解決了這個問題，順便把上一個量測電壓的幾個區域變數變成全域變數。 參考資料 MSP430G2x53, MSP430G2x13 Mixed Signal Microcontroller datasheet MSP430x2xx Family User’s Guide 制作Arduino欧姆表测量电阻值 "},{"title":"LabView植物大戰殭屍 開發紀錄","date":"2021-11-07T07:25:13.000Z","url":"/2021/11/07/labview-midterm/","tags":[["LabView","/tags/LabView/"]],"categories":[["學校","/categories/%E5%AD%B8%E6%A0%A1/"]],"content":"用LabView做了一個植物大戰殭屍，當作是這門課期中報告。 玩法不要讓殭屍碰到堡壘(滑桿最左邊)，否則堡壘的生命值會扣點，當生命值等於0，遊戲結束。 按下放置植物的按紐，植物會射出一個子彈，當子彈碰到殭屍，分數會多得1分。但相對的，殭屍的速度會變快。 主程式 大量用到一堆While Loop還有Delay，特別是在殭屍的移動上面，會隨著等級的增加而讓殭屍的移動速度越快。 雖然是固定將滑桿數值增加0.5，但Delay是透過亂數產生，因此可以產生移動速度不一致的成果。 OS：忘了Event 怎麼用了… 副程式Level Up 在這裡會將殭屍做「升級」的動作：將殭屍的Delay變數減1。為了方便擴充所以用Array處理。 參考資料 植物大戰殭屍 - 遊戲天堂 "},{"title":"MSP430 之 無線三用電表 開發筆記1","date":"2021-10-31T10:49:08.000Z","url":"/2021/10/31/msp430-multimeter-1/","tags":[["msp430","/tags/msp430/"]],"categories":[["DIY","/categories/DIY/"]],"content":"使用元件 MSP430G2ET Launchpad HC12 433MHz 無線模組 已完成目標量測電壓 使用MSP430的ADC10單元，並開啟Repeat Signal Channel Mode（多次量取單通道模式）量測，減少CPU的負擔。 目前量程為0~16.5V，單位可精準到mV等級，誤差嘛…不用說了。 前端顯示 使用NodeRED解碼，並顯示數值。 雖然背後顯示的Node都拉得差不多了。但目前只有電壓，及電壓的歷史紀錄有作用而已，剩下的都是狗屎。 開發照片 參考資料 MSP430G2x53, MSP430G2x13 Mixed Signal Microcontroller datasheet] MSP430x2xx Family User’s Guide "},{"date":"2023-01-18T16:14:18.602Z","url":"/links.html","categories":[[" ",""]]},{"date":"2023-01-18T16:04:02.046Z","url":"/categories/index.html","categories":[[" ",""]]},{"date":"2023-01-18T16:05:57.789Z","url":"/tags/index.html","categories":[[" ",""]]}]